name: Deploy
description: 'Deploys a new project to the serverless infrastructure'

on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domain Name'
        required: true
        type: string
      frontend_repo:
        description: 'Frontend Repository URL (e.g., https://github.com/username/repo)'
        required: true
        type: string
      gmail_address:
        description: 'Gmail address to forward emails to'
        required: true
        type: string

jobs:
  validate:
    name: 'Validate'
    uses: ./.github/workflows/validate.yaml
    with:
      domain: ${{ inputs.domain }}
      frontend_repo: ${{ inputs.frontend_repo }}
      gmail_address: ${{ inputs.gmail_address }}
    secrets:
      cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  validate-brevo:
    name: 'Validate Brevo API Key'
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate Brevo API Key
        uses: ./.github/actions/validate_brevo_api_key
        with:
          brevo_api_key: ${{ secrets.BREVO_API_KEY }}

  manage-domains:
    name: 'Manage Domains'
    needs: [validate, validate-brevo]
    runs-on: ubuntu-latest
    outputs:
      domains: ${{ steps.manage-domains.outputs.domains }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Manage domains
        id: manage-domains
        uses: ./.github/actions/manage_domains
        with:
          domain: ${{ inputs.domain }}
          frontend_repo: ${{ inputs.frontend_repo }}
          cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  run-terraform:
    name: 'Run Terraform'
    needs: [manage-domains, validate]
    runs-on: ubuntu-latest
    outputs:
      auth_db_id: ${{ steps.terraform-outputs.outputs.auth_db_id }}
      domain_worker_names: ${{ steps.terraform-outputs.outputs.domain_worker_names }}
      domain_database_ids: ${{ steps.terraform-outputs.outputs.domain_database_ids }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"

      - name: Get State from R2
        id: get-state
        shell: bash
        run: |
          # Try to get the state file
          STATE_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/r2/buckets/terraform-state/objects/terraform.tfstate" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json")
          
          # Check if we got a valid response and if the file exists
          if echo "$STATE_RESPONSE" | jq -e '.success == false and .errors[0].code == 10007' > /dev/null; then
            echo "No existing state file found - this is expected on first run"
            echo "state_exists=false" >> $GITHUB_OUTPUT
          elif echo "$STATE_RESPONSE" | jq empty 2>/dev/null; then
            # State file exists, save it directly
            echo "$STATE_RESPONSE" > terraform/terraform.tfstate
            
            # Verify the state file has the required version field
            if ! jq -e '.version' terraform/terraform.tfstate > /dev/null; then
              echo "::error::Invalid state file format - missing version field"
              echo "state_exists=false" >> $GITHUB_OUTPUT
              rm terraform/terraform.tfstate
              exit 1
            else
              echo "state_exists=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "::error::Unexpected error from R2"
            echo "$STATE_RESPONSE"
            exit 1
          fi

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init -upgrade
        env:
          TF_VAR_cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_domains_json: ${{ needs.manage-domains.outputs.domains }}
          TF_VAR_gmail_address: ${{ inputs.gmail_address }}
          TF_IN_AUTOMATION: "true"

      - name: Terraform Plan
        id: terraform-plan
        working-directory: ./terraform
        run: |
          terraform plan -out=tfplan
        env:
          TF_VAR_cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_domains_json: ${{ needs.manage-domains.outputs.domains }}
          TF_VAR_gmail_address: ${{ inputs.gmail_address }}
          TF_IN_AUTOMATION: "true"

      - name: Terraform Apply
        id: terraform-apply
        working-directory: ./terraform
        run: |
          terraform apply -auto-approve tfplan
        env:
          TF_VAR_cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_domains_json: ${{ needs.manage-domains.outputs.domains }}
          TF_VAR_gmail_address: ${{ inputs.gmail_address }}
          TF_IN_AUTOMATION: "true"

      - name: Get Terraform Outputs
        id: terraform-outputs
        working-directory: ./terraform
        run: |
          echo "auth_db_id=$(terraform output -raw auth_db_id)" >> $GITHUB_OUTPUT
          echo "domain_worker_names=$(terraform output -json domain_worker_names)" >> $GITHUB_OUTPUT
          echo "domain_database_ids=$(terraform output -json domain_database_ids)" >> $GITHUB_OUTPUT

      - name: Save State to R2
        id: save-state
        shell: bash
        working-directory: ./terraform
        run: |
          # Save the state file
          curl -X PUT "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/r2/buckets/terraform-state/objects/terraform.tfstate" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data-binary @terraform.tfstate
          
          # Save the state lock file if it exists
          if [ -f "terraform.tfstate.lock.info" ]; then
            curl -X PUT "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/r2/buckets/terraform-state/objects/terraform.tfstate.lock.info" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data-binary @terraform.tfstate.lock.info
          fi

  deploy-auth-service:
    name: 'Deploy Auth Service'
    needs: [run-terraform]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy Auth Service
        uses: ./.github/actions/deploy_auth_service
        with:
          cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          auth_db_id: ${{ needs.run-terraform.outputs.auth_db_id }}
          domain_worker_names: ${{ needs.run-terraform.outputs.domain_worker_names }}
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          brevo_api_key: ${{ secrets.BREVO_API_KEY }}

  deploy-domain-workers:
    name: 'Deploy Domain Workers'
    needs: [run-terraform]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy Domain Workers
        uses: ./.github/actions/deploy_domain_workers
        with:
          cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          domain_worker_names: ${{ needs.run-terraform.outputs.domain_worker_names }}
          domain_database_ids: ${{ needs.run-terraform.outputs.domain_database_ids }}
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  apply-domain-schemas:
    name: 'Apply Domain Database Schemas'
    needs: [run-terraform, deploy-domain-workers]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Apply Domain Database Schemas
        uses: ./.github/actions/apply_domain_db_schemas
        with:
          cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          domain_database_ids: ${{ needs.run-terraform.outputs.domain_database_ids }}
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  apply-auth-schema:
    name: 'Apply Auth Database Schema'
    needs: [run-terraform, deploy-auth-service]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Apply Auth DB Schema
        uses: ./.github/actions/apply_auth_db_schema
        with:
          cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          auth_db_id: ${{ needs.run-terraform.outputs.auth_db_id }}

  generate-api-docs:
    name: 'Generate API Docs'
    needs: [run-terraform, deploy-domain-workers, apply-domain-schemas]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate API Docs
        uses: ./.github/actions/generate_documentation
        with:
          domain_worker_names: ${{ needs.run-terraform.outputs.domain_worker_names }}
          domain_database_ids: ${{ needs.run-terraform.outputs.domain_database_ids }}
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  deploy-pages:
    name: 'Deploy Pages'
    needs: [run-terraform, apply-domain-schemas, apply-auth-schema]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy Pages
        uses: ./.github/actions/deploy_pages
        with:
          cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
