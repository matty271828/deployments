name: 'Add to Domains'
description: 'Adds a new domain and its frontend repo to the domains.json file'

inputs:
  domain:
    description: 'Domain Name'
    required: true
  frontend_repo:
    description: 'Frontend Repository URL (e.g., https://github.com/username/repo)'
    required: true

outputs:
  domains:
    description: 'JSON array of all domains and their frontend repos'
    value: ${{ steps.get-domains.outputs.domains }}

runs:
  using: "composite"
  steps:
    - name: Install jq
      shell: bash
      run: |
        if ! command -v jq &> /dev/null; then
          sudo apt-get update
          sudo apt-get install -y jq
        fi

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create domains.json if it doesn't exist
      shell: bash
      run: |
        if [ ! -f domains.json ]; then
          echo '[]' > domains.json
        fi

    - name: Validate domain format
      shell: bash
      run: |
        if ! [[ "${{ inputs.domain }}" =~ ^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\.[a-zA-Z]{2,}$ ]]; then
          echo "Error: Invalid domain format"
          exit 1
        fi
        if ! [[ "${{ inputs.frontend_repo }}" =~ ^https://github.com/[a-zA-Z0-9-]+/[a-zA-Z0-9-]+$ ]]; then
          echo "Error: Invalid GitHub repository URL format"
          exit 1
        fi

    - name: Check if domain exists
      id: check-domain
      shell: bash
      run: |
        if jq -e --arg domain "${{ inputs.domain }}" '.[] | select(.domain == $domain)' domains.json > /dev/null; then
          echo "domain_exists=true" >> $GITHUB_OUTPUT
        else
          echo "domain_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Append domain if new
      if: steps.check-domain.outputs.domain_exists == 'false'
      shell: bash
      run: |
        # Create new entry
        NEW_ENTRY=$(jq -n --arg domain "${{ inputs.domain }}" --arg repo "${{ inputs.frontend_repo }}" '{domain: $domain, frontend_repo: $repo}')
        
        # Add to existing array and ensure proper formatting
        jq --argjson new "$NEW_ENTRY" '. + [$new]' domains.json | jq -c '.' > domains.json.tmp && mv domains.json.tmp domains.json

    - name: Get all domains
      id: get-domains
      shell: bash
      run: |
        if [ ! -s domains.json ]; then
          echo "Error: domains.json is empty or invalid"
          exit 1
        fi
        
        # Validate JSON format
        if ! jq empty domains.json 2>/dev/null; then
          echo "Error: domains.json contains invalid JSON"
          exit 1
        fi
        
        # Output the JSON array with proper escaping and no whitespace
        DOMAINS=$(jq -c '.' domains.json)
        
        # Set output with proper escaping
        {
          echo "domains<<EOF"
          echo "$DOMAINS"
          echo "EOF"
        } >> $GITHUB_OUTPUT 

    - name: Commit domains.json
      shell: bash
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add domains.json
        git commit -m "Update domains.json with new domain" || exit 0
        git push 