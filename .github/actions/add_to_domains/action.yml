name: 'Add to Domains'
description: 'Adds a new domain and its frontend repo to the domains.json file'

inputs:
  domain:
    description: 'Domain Name'
    required: true
  frontend_repo:
    description: 'Frontend Repository URL (e.g., https://github.com/username/repo)'
    required: true
  cloudflare_account_id:
    description: 'Cloudflare Account ID'
    required: true
  cloudflare_api_token:
    description: 'Cloudflare API Token'
    required: true

outputs:
  domains:
    description: 'JSON array of all domains and their frontend repos'
    value: ${{ steps.get-domains.outputs.domains }}

runs:
  using: "composite"
  steps:
    - name: Install jq
      shell: bash
      run: |
        if ! command -v jq &> /dev/null; then
          sudo apt-get update
          sudo apt-get install -y jq
        fi

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Validate domain format
      shell: bash
      run: |
        if ! [[ "${{ inputs.domain }}" =~ ^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\.[a-zA-Z]{2,}$ ]]; then
          echo "Error: Invalid domain format"
          exit 1
        fi
        if ! [[ "${{ inputs.frontend_repo }}" =~ ^https://github.com/[a-zA-Z0-9-]+/[a-zA-Z0-9-]+$ ]]; then
          echo "Error: Invalid GitHub repository URL format"
          exit 1
        fi

    - name: Enable R2 if not enabled
      shell: bash
      run: |
        # Check if R2 is enabled
        R2_STATUS=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2" \
          -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
          -H "Content-Type: application/json")
        
        if ! echo "$R2_STATUS" | jq -e '.success == true' > /dev/null; then
          # Enable R2
          ENABLE_RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2" \
            -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
            -H "Content-Type: application/json")
          
          if ! echo "$ENABLE_RESPONSE" | jq -e '.success == true' > /dev/null; then
            echo "Error: Failed to enable R2"
            echo "$ENABLE_RESPONSE" | jq -r '.errors[0].message'
            exit 1
          fi
          
          # Wait a moment for R2 to be fully enabled
          sleep 5
        fi

    - name: Create R2 bucket if it doesn't exist
      shell: bash
      run: |
        # Check if bucket exists
        BUCKET_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets/domain-mappings" \
          -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
          -H "Content-Type: application/json")
        
        if ! echo "$BUCKET_RESPONSE" | jq -e '.success == true' > /dev/null; then
          # Create bucket if it doesn't exist
          CREATE_RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets" \
            -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
            -H "Content-Type: application/json" \
            -d '{"name": "domain-mappings"}')
          
          if ! echo "$CREATE_RESPONSE" | jq -e '.success == true' > /dev/null; then
            echo "Error: Failed to create R2 bucket"
            echo "$CREATE_RESPONSE" | jq -r '.errors[0].message'
            exit 1
          fi
        fi

    - name: Get current mappings
      id: get-current
      shell: bash
      run: |
        # Try to get current mappings
        MAPPINGS_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets/domain-mappings/objects/mappings.json" \
          -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
          -H "Content-Type: application/json")
        
        if echo "$MAPPINGS_RESPONSE" | jq -e '.success == true' > /dev/null; then
          # If mappings exist, get their content
          MAPPINGS=$(echo "$MAPPINGS_RESPONSE" | jq -r '.result.data')
        else
          # If no mappings exist, start with empty array
          MAPPINGS='[]'
        fi
        
        echo "current_mappings=$MAPPINGS" >> $GITHUB_OUTPUT

    - name: Add new domain mapping
      shell: bash
      run: |
        # Create new entry
        NEW_ENTRY=$(jq -n --arg domain "${{ inputs.domain }}" --arg repo "${{ inputs.frontend_repo }}" '{domain: $domain, frontend_repo: $repo}')
        
        # Add to existing array
        UPDATED_MAPPINGS=$(echo "${{ steps.get-current.outputs.current_mappings }}" | jq --argjson new "$NEW_ENTRY" '. + [$new]')
        
        # Upload updated mappings
        UPLOAD_RESPONSE=$(curl -s -X PUT "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets/domain-mappings/objects/mappings.json" \
          -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
          -H "Content-Type: application/json" \
          -d "$UPDATED_MAPPINGS")
        
        if ! echo "$UPLOAD_RESPONSE" | jq -e '.success == true' > /dev/null; then
          echo "Error: Failed to upload updated mappings"
          echo "$UPLOAD_RESPONSE" | jq -r '.errors[0].message'
          exit 1
        fi