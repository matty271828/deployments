name: 'Deploy Auth Service'
description: 'Deploys the auth service'

inputs:
  cloudflare_account_id:
    description: 'Cloudflare Account ID'
    required: true
  cloudflare_api_token:
    description: 'Cloudflare API token'
    required: true
  auth_db_id:
    description: 'The ID of the AUTH_DB D1 database'
    required: true
  domain_worker_names:
    description: 'JSON string of domain worker names for worker-to-worker bindings'
    required: true
  GH_PERSONAL_ACCESS_TOKEN:
    description: 'GitHub Personal Access Token'
    required: true
  brevo_api_key:
    description: 'Brevo API key for email service'
    required: true
  stripe_secret_key:
    description: 'Stripe secret key for payment processing'
    required: true
  stripe_webhook_secret:
    description: 'Stripe webhook secret for webhook verification'
    required: true
    
runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      working-directory: './auth-service'
      shell: bash
      run: 'npm install'

    # Due to the bug in the cloudflare terraform provider, we need to manually
    # update the wrangler.toml file to include the AUTH_DB database ID.
    - name: Update wrangler.toml
      working-directory: './auth-service'
      shell: bash
      run: |
        sed -i "s/database_id = \"\"/database_id = \"${{ inputs.auth_db_id }}\"/" wrangler.toml

    # Add worker-to-worker binding for each domain worker.
    # These are the 1 to many bindings from the auth-service to the domain workers.
    - name: Add worker-to-worker bindings
      working-directory: './auth-service'
      shell: bash
      run: |
        # Parse the domain worker names JSON
        DOMAIN_WORKERS='${{ inputs.domain_worker_names }}'
        
        # Add worker-to-worker bindings to wrangler.toml
        echo "" >> wrangler.toml
        echo "# Worker-to-worker bindings" >> wrangler.toml
        echo "$DOMAIN_WORKERS" | jq -r 'to_entries[] | "[[services]]\nbinding = \"" + .value + "\"\nservice = \"" + .value + "\""' >> wrangler.toml

    # Deploy the worker first (without secrets)
    - name: Deploy Worker
      working-directory: './auth-service'
      shell: bash
      run: 'npx wrangler deploy'
      env:
        CLOUDFLARE_API_TOKEN: ${{ inputs.cloudflare_api_token }}
        CLOUDFLARE_ACCOUNT_ID: ${{ inputs.cloudflare_account_id }}

    # Set Brevo API key as a Wrangler secret (after worker exists)
    - name: Set Brevo API Key Secret
      working-directory: './auth-service'
      shell: bash
      run: |
        echo "${{ inputs.brevo_api_key }}" | npx wrangler secret put BREVO_API_KEY
      env:
        CLOUDFLARE_API_TOKEN: ${{ inputs.cloudflare_api_token }}
        CLOUDFLARE_ACCOUNT_ID: ${{ inputs.cloudflare_account_id }}

    # Set Stripe secrets as Wrangler secrets
    - name: Set Stripe Secrets
      working-directory: './auth-service'
      shell: bash
      run: |
        echo "${{ inputs.stripe_secret_key }}" | npx wrangler secret put STRIPE_SECRET_KEY
        
        # Check if GitHub repository secret exists and is not empty
        if [ -z "${{ secrets.STRIPE_WEBHOOK_SECRET }}" ]; then
          echo "‚ùå Error: STRIPE_WEBHOOK_SECRET repository secret is empty or not set"
          echo "üí° Make sure the setup_stripe action has run and created the repository secret"
          exit 1
        fi
        
        # Check if the secret has the expected format (should start with 'whsec_' and be at least 50 chars)
        WEBHOOK_SECRET="${{ secrets.STRIPE_WEBHOOK_SECRET }}"
        if [[ ! "$WEBHOOK_SECRET" =~ ^whsec_[a-zA-Z0-9]{40,}$ ]]; then
          echo "‚ùå Error: STRIPE_WEBHOOK_SECRET has invalid format"
          echo "Expected format: whsec_ followed by at least 40 alphanumeric characters"
          echo "Actual length: ${#WEBHOOK_SECRET}"
          echo "First 10 chars: ${WEBHOOK_SECRET:0:10}"
          exit 1
        fi
        
        echo "‚úÖ Webhook secret validation passed (length: ${#WEBHOOK_SECRET})"
        echo "$WEBHOOK_SECRET" | npx wrangler secret put STRIPE_WEBHOOK_SECRET
        echo "‚úÖ STRIPE_WEBHOOK_SECRET set successfully"
      env:
        CLOUDFLARE_API_TOKEN: ${{ inputs.cloudflare_api_token }}
        CLOUDFLARE_ACCOUNT_ID: ${{ inputs.cloudflare_account_id }}