name: 'Deploy Domain Workers'
description: 'Deploys multiple domain workers for different domains'

inputs:
  cloudflare_account_id:
    description: 'Cloudflare Account ID'
    required: true
  cloudflare_api_token:
    description: 'Cloudflare API token'
    required: true
  domain_worker_names:
    description: 'JSON string of domain worker names for deployment'
    required: true
  domain_database_ids:
    description: 'JSON string of domain database IDs for database bindings'
    required: true
  GH_PERSONAL_ACCESS_TOKEN:
    description: 'GitHub Personal Access Token'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies for domain-worker template
      working-directory: './domain-worker'
      shell: bash
      run: 'npm install'

    # Deploy each domain worker by cloning the template and updating the name
    - name: Deploy Domain Workers
      shell: bash
      run: |
        # Parse the domain worker names and database IDs JSON
        DOMAIN_WORKERS='${{ inputs.domain_worker_names }}'
        DOMAIN_DATABASES='${{ inputs.domain_database_ids }}'
        
        # Loop through each domain worker and deploy it
        echo "$DOMAIN_WORKERS" | jq -r 'to_entries[] | .value' | while read -r worker_name; do
          echo "Deploying domain worker: $worker_name"
          
          # Create a temporary directory for this worker
          temp_dir=$(mktemp -d)
          
          # Copy the domain-worker template to the temp directory
          cp -r domain-worker/* "$temp_dir/"
          
          # Update the wrangler.toml with the worker name
          sed -i "s/name = \"\"/name = \"$worker_name\"/" "$temp_dir/wrangler.toml"
          
          # Find the corresponding database ID for this worker
          # The worker name format is "{repo_name}-worker", so we extract the repo name
          repo_name=$(echo "$worker_name" | sed 's/-worker$//')
          
          # Get the database ID for this repo
          database_id=$(echo "$DOMAIN_DATABASES" | jq -r --arg repo "$repo_name" '.[$repo].database_id')
          
          if [ "$database_id" != "null" ] && [ -n "$database_id" ]; then
            echo "Adding database binding for $repo_name with ID: $database_id"
            
            # Update the existing database configuration in wrangler.toml
            sed -i "s/database_name = \"\"/database_name = \"${repo_name}-db\"/" "$temp_dir/wrangler.toml"
            sed -i "s/database_id = \"\"/database_id = \"$database_id\"/" "$temp_dir/wrangler.toml"
          else
            echo "::warning::No database ID found for repo $repo_name, skipping database binding"
          fi
          
          # Add auth service binding
          echo "Adding auth service binding"
          sed -i "s/service = \"\"/service = \"auth-service\"/" "$temp_dir/wrangler.toml"
          
          # Deploy the worker
          cd "$temp_dir"
          npx wrangler deploy
          
          # Clean up
          cd - > /dev/null
          rm -rf "$temp_dir"
          
          echo "Successfully deployed: $worker_name"
        done
      env:
        CLOUDFLARE_API_TOKEN: ${{ inputs.cloudflare_api_token }}
        CLOUDFLARE_ACCOUNT_ID: ${{ inputs.cloudflare_account_id }}