name: 'Deploy Domain Workers'
description: 'Deploys multiple domain workers for different domains with auto-generated GraphQL APIs'

inputs:
  cloudflare_account_id:
    description: 'Cloudflare Account ID'
    required: true
  cloudflare_api_token:
    description: 'Cloudflare API token'
    required: true
  domain_worker_names:
    description: 'JSON string of domain worker names for deployment'
    required: true
  domain_database_ids:
    description: 'JSON string of domain database IDs for database bindings'
    required: true
  GH_PERSONAL_ACCESS_TOKEN:
    description: 'GitHub Personal Access Token'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies for domain-worker template
      working-directory: './domain-worker'
      shell: bash
      run: 'npm install'

    - name: Parse Domain Configuration
      id: parse-config
      shell: bash
      run: |
        # Parse the domain worker names and database IDs JSON
        DOMAIN_WORKERS='${{ inputs.domain_worker_names }}'
        DOMAIN_DATABASES='${{ inputs.domain_database_ids }}'
        
        # Store the parsed data for use in subsequent steps
        echo "domain_workers=$DOMAIN_WORKERS" >> $GITHUB_OUTPUT
        echo "domain_databases=$DOMAIN_DATABASES" >> $GITHUB_OUTPUT
        
        # Display what we're working with
        echo "Domain workers to deploy:"
        echo "$DOMAIN_WORKERS" | jq -r 'to_entries[] | .value'
        echo ""
        echo "Database mappings:"
        echo "$DOMAIN_DATABASES" | jq -r 'to_entries[] | "\(.key): \(.value.database_id)"'

    - name: Setup, Generate GraphQL, and Deploy Workers
      shell: bash
      run: |
        # Parse the domain worker names and database IDs JSON
        DOMAIN_WORKERS='${{ steps.parse-config.outputs.domain_workers }}'
        DOMAIN_DATABASES='${{ steps.parse-config.outputs.domain_databases }}'
        
        echo "=== DEBUG: Starting worker processing ==="
        echo "DOMAIN_WORKERS: $DOMAIN_WORKERS"
        echo "DOMAIN_DATABASES: $DOMAIN_DATABASES"
        echo "Current working directory: $(pwd)"
        echo "Domain worker template exists: $([ -d "domain-worker" ] && echo "YES" || echo "NO")"
        echo "========================================"
        
        # Create schemas directory in workspace
        mkdir -p .github/schemas
        
        # Loop through each domain worker and process completely
        while IFS= read -r worker_name; do
          echo "=== DEBUG: Processing worker: $worker_name ==="
          
          # Create a temporary directory for this worker
          temp_dir=$(mktemp -d)
          echo "DEBUG: Created temp directory: $temp_dir"
          
          # Copy the domain-worker template to the temp directory
          echo "DEBUG: Copying domain-worker template to $temp_dir"
          cp -r domain-worker/* "$temp_dir/"
          echo "DEBUG: Template copied. Contents of temp_dir:"
          ls -la "$temp_dir/"
          
          # Update the wrangler.toml with the worker name
          echo "DEBUG: Updating wrangler.toml with worker name: $worker_name"
          sed -i "s/name = \"\"/name = \"$worker_name\"/" "$temp_dir/wrangler.toml"
          echo "DEBUG: Updated wrangler.toml:"
          cat "$temp_dir/wrangler.toml"
          
          # Find the corresponding database ID for this worker
          # The worker name format is "{repo_name}-worker", so we extract the repo name
          repo_name=$(echo "$worker_name" | sed 's/-worker$//')
          echo "DEBUG: Extracted repo name: $repo_name"
          
          # Get the database ID for this repo
          database_id=$(echo "$DOMAIN_DATABASES" | jq -r --arg repo "$repo_name" '.[$repo].database_id')
          echo "DEBUG: Found database_id: $database_id"
          
          if [ "$database_id" != "null" ] && [ -n "$database_id" ]; then
            echo "DEBUG: Adding database binding for $repo_name with ID: $database_id"
            
            # Update the existing database configuration in wrangler.toml
            sed -i "s/database_name = \"\"/database_name = \"${repo_name}-db\"/" "$temp_dir/wrangler.toml"
            sed -i "s/database_id = \"\"/database_id = \"$database_id\"/" "$temp_dir/wrangler.toml"
            echo "DEBUG: Database bindings updated in wrangler.toml:"
            cat "$temp_dir/wrangler.toml"
          else
            echo "::warning::No database ID found for repo $repo_name, skipping database binding"
          fi
          
          # Add auth service binding
          echo "DEBUG: Adding auth service binding"
          sed -i "s/service = \"\"/service = \"auth-service\"/" "$temp_dir/wrangler.toml"
          echo "DEBUG: Auth service binding added. Final wrangler.toml:"
          cat "$temp_dir/wrangler.toml"
          
          echo "DEBUG: Template prepared and bindings configured for $worker_name in $temp_dir"
          
          # Fetch schema and generate GraphQL code
          echo "DEBUG: Fetching schema and generating GraphQL code for: $worker_name"
          
          # Get the schema file content from the repo
          SCHEMA_CONTENT=$(curl -s -H "Authorization: token ${{ inputs.GH_PERSONAL_ACCESS_TOKEN }}" \
            "https://api.github.com/repos/matty271828/$repo_name/contents/schema.sql" | \
            jq -r '.content // empty' | base64 -d)
          
          if [ -n "$SCHEMA_CONTENT" ]; then
            echo "DEBUG: Found schema.sql in $repo_name, generating GraphQL code..."
            echo "DEBUG: Schema.sql contents:"
            echo "$SCHEMA_CONTENT"
            
            # Write the schema content to workspace file
            echo "$SCHEMA_CONTENT" > ".github/schemas/${repo_name}.sql"
            echo "DEBUG: Schema written to .github/schemas/${repo_name}.sql"
            
            # Install dependencies in the temp worker directory
            echo "DEBUG: Installing dependencies in worker temp directory"
            cd "$temp_dir"
            npm install
            
            echo "DEBUG: Dependencies installed. Contents of worker temp directory:"
            ls -la
            
            # Copy the GraphQL generation script from domain-worker package
            echo "DEBUG: Copying GraphQL generation script"
            cp src/generate-graphql.js .
            
            # Copy the schema file to the worker directory
            echo "DEBUG: Copying schema file to worker directory"
            cp "$GITHUB_WORKSPACE/.github/schemas/${repo_name}.sql" ./schema.sql
            
            # Run the GraphQL generation script
            echo "DEBUG: Running GraphQL generation script"
            node generate-graphql.js
            
            # Clean up the temporary script
            rm generate-graphql.js
            
            echo "DEBUG: GraphQL code generated. Generated files:"
            ls -la src/
            
            echo "GraphQL code generated for $repo_name"
          else
            echo "DEBUG: No schema.sql found in $repo_name, using placeholder GraphQL code"
          fi
          
          # Deploy the worker
          echo "DEBUG: Deploying domain worker: $worker_name"
          echo "DEBUG: Current directory before deployment: $(pwd)"
          echo "DEBUG: Contents of deployment directory:"
          ls -la
          
          cd "$temp_dir"
          echo "DEBUG: Changed to deployment directory: $(pwd)"
          echo "DEBUG: Final wrangler.toml for deployment:"
          cat wrangler.toml
          
          npx wrangler deploy
          
          echo "DEBUG: Deployment completed for: $worker_name"
          echo "Successfully deployed: $worker_name"
          
          echo "=== DEBUG: Completed processing worker: $worker_name ==="
          echo ""
          
        done < <(echo "$DOMAIN_WORKERS" | jq -r 'to_entries[] | .value')
        
        echo "=== DEBUG: All workers processed successfully ==="
      env:
        CLOUDFLARE_API_TOKEN: ${{ inputs.cloudflare_api_token }}
        CLOUDFLARE_ACCOUNT_ID: ${{ inputs.cloudflare_account_id }}