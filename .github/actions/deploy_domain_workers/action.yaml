name: 'Deploy Domain Workers'
description: 'Deploys multiple domain workers for different domains with auto-generated GraphQL APIs'

inputs:
  cloudflare_account_id:
    description: 'Cloudflare Account ID'
    required: true
  cloudflare_api_token:
    description: 'Cloudflare API token'
    required: true
  domain_worker_names:
    description: 'JSON string of domain worker names for deployment'
    required: true
  domain_database_ids:
    description: 'JSON string of domain database IDs for database bindings'
    required: true
  GH_PERSONAL_ACCESS_TOKEN:
    description: 'GitHub Personal Access Token'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies for domain-worker template
      working-directory: './domain-worker'
      shell: bash
      run: 'npm install'

    # Deploy each domain worker by cloning the template and updating the name
    - name: Parse Domain Configuration
      shell: bash
      run: |
        # Parse the domain worker names and database IDs JSON
        DOMAIN_WORKERS='${{ inputs.domain_worker_names }}'
        DOMAIN_DATABASES='${{ inputs.domain_database_ids }}'
        
        # Store the parsed data for use in subsequent steps
        echo "domain_workers=$DOMAIN_WORKERS" >> $GITHUB_OUTPUT
        echo "domain_databases=$DOMAIN_DATABASES" >> $GITHUB_OUTPUT
        
        # Display what we're working with
        echo "Domain workers to deploy:"
        echo "$DOMAIN_WORKERS" | jq -r 'to_entries[] | .value'
        echo ""
        echo "Database mappings:"
        echo "$DOMAIN_DATABASES" | jq -r 'to_entries[] | "\(.key): \(.value.database_id)"'

    - name: Setup Worker Template
      shell: bash
      run: |
        # Parse the domain worker names JSON
        DOMAIN_WORKERS='${{ steps.parse-config.outputs.domain_workers }}'
        
        # Create a JSON object to store temp directories
        TEMP_DIRS='{}'
        
        # Loop through each domain worker and prepare the template
        echo "$DOMAIN_WORKERS" | jq -r 'to_entries[] | .value' | while read -r worker_name; do
          echo "Setting up template for: $worker_name"
          
          # Create a temporary directory for this worker
          temp_dir=$(mktemp -d)
          
          # Add to our JSON object
          TEMP_DIRS=$(echo "$TEMP_DIRS" | jq --arg worker "$worker_name" --arg dir "$temp_dir" '. + {($worker): $dir}')
          
          # Copy the domain-worker template to the temp directory
          cp -r domain-worker/* "$temp_dir/"
          
          # Update the wrangler.toml with the worker name
          sed -i "s/name = \"\"/name = \"$worker_name\"/" "$temp_dir/wrangler.toml"
          
          echo "Template prepared for $worker_name in $temp_dir"
        done
        
        # Store the temp directories as a single output
        echo "temp_dirs=$TEMP_DIRS" >> $GITHUB_OUTPUT

    - name: Configure Database Bindings
      shell: bash
      run: |
        # Parse the domain worker names and database IDs JSON
        DOMAIN_WORKERS='${{ steps.parse-config.outputs.domain_workers }}'
        DOMAIN_DATABASES='${{ steps.parse-config.outputs.domain_databases }}'
        TEMP_DIRS='${{ steps.setup-template.outputs.temp_dirs }}'
        
        # Loop through each domain worker and configure database bindings
        echo "$DOMAIN_WORKERS" | jq -r 'to_entries[] | .value' | while read -r worker_name; do
          echo "Configuring database bindings for: $worker_name"
          
          # Get the temp directory for this worker
          temp_dir=$(echo "$TEMP_DIRS" | jq -r --arg worker "$worker_name" '.[$worker]')
          
          # Find the corresponding database ID for this worker
          # The worker name format is "{repo_name}-worker", so we extract the repo name
          repo_name=$(echo "$worker_name" | sed 's/-worker$//')
          
          # Get the database ID for this repo
          database_id=$(echo "$DOMAIN_DATABASES" | jq -r --arg repo "$repo_name" '.[$repo].database_id')
          
          if [ "$database_id" != "null" ] && [ -n "$database_id" ]; then
            echo "Adding database binding for $repo_name with ID: $database_id"
            
            # Update the existing database configuration in wrangler.toml
            sed -i "s/database_name = \"\"/database_name = \"${repo_name}-db\"/" "$temp_dir/wrangler.toml"
            sed -i "s/database_id = \"\"/database_id = \"$database_id\"/" "$temp_dir/wrangler.toml"
          else
            echo "::warning::No database ID found for repo $repo_name, skipping database binding"
          fi
          
          # Add auth service binding
          echo "Adding auth service binding"
          sed -i "s/service = \"\"/service = \"auth-service\"/" "$temp_dir/wrangler.toml"
          
          echo "Database bindings configured for $worker_name"
        done

    - name: Clone Frontend Repositories
      shell: bash
      run: |
        # Parse the domain worker names JSON
        DOMAIN_WORKERS='${{ steps.parse-config.outputs.domain_workers }}'
        
        # Create a JSON object to store frontend temp directories
        FRONTEND_TEMP_DIRS='{}'
        
        # Loop through each domain worker and clone the frontend repo
        echo "$DOMAIN_WORKERS" | jq -r 'to_entries[] | .value' | while read -r worker_name; do
          echo "Cloning frontend repo for: $worker_name"
          
          # Extract repo name from worker name
          repo_name=$(echo "$worker_name" | sed 's/-worker$//')
          
          # Create temp directory for frontend repo
          frontend_temp_dir=$(mktemp -d)
          
          # Add to our JSON object
          FRONTEND_TEMP_DIRS=$(echo "$FRONTEND_TEMP_DIRS" | jq --arg worker "$worker_name" --arg dir "$frontend_temp_dir" '. + {($worker): $dir}')
          
          # Clone the frontend repo
          cd "$frontend_temp_dir"
          git clone "https://x-access-token:${{ inputs.GH_PERSONAL_ACCESS_TOKEN }}@github.com/matty271828/$repo_name.git" .
          
          echo "Frontend repo cloned for $worker_name in $frontend_temp_dir"
        done
        
        # Store the frontend temp directories as a single output
        echo "frontend_temp_dirs=$FRONTEND_TEMP_DIRS" >> $GITHUB_OUTPUT

    - name: Generate GraphQL Code
      shell: bash
      run: |
        # Parse the domain worker names JSON
        DOMAIN_WORKERS='${{ steps.parse-config.outputs.domain_workers }}'
        TEMP_DIRS='${{ steps.setup-template.outputs.temp_dirs }}'
        FRONTEND_TEMP_DIRS='${{ steps.clone-repos.outputs.frontend_temp_dirs }}'
        
        # Loop through each domain worker and generate GraphQL code
        echo "$DOMAIN_WORKERS" | jq -r 'to_entries[] | .value' | while read -r worker_name; do
          echo "Generating GraphQL code for: $worker_name"
          
          # Get the temp directories
          temp_dir=$(echo "$TEMP_DIRS" | jq -r --arg worker "$worker_name" '.[$worker]')
          frontend_temp_dir=$(echo "$FRONTEND_TEMP_DIRS" | jq -r --arg worker "$worker_name" '.[$worker]')
          
          # Extract repo name from worker name
          repo_name=$(echo "$worker_name" | sed 's/-worker$//')
          
          # Check if schema.sql exists
          if [ -f "$frontend_temp_dir/schema.sql" ]; then
            echo "Found schema.sql in $repo_name, generating GraphQL code..."
            
            # Install dependencies in the temp worker directory
            cd "$temp_dir"
            npm install
            
            # Create a temporary script to generate GraphQL code
            cat > generate-graphql.js << 'EOF'
const fs = require('fs');
const path = require('path');

// Import the GraphQL generator
const { generateGraphQLModule } = require('./src/graphql-generator');

// Read the schema.sql file
const schemaSql = fs.readFileSync('../schema.sql', 'utf8');

// Generate the GraphQL code
const generatedCode = generateGraphQLModule(schemaSql);

// Write the generated code to generated-graphql.ts
fs.writeFileSync('./src/generated-graphql.ts', generatedCode);

console.log('GraphQL code generated successfully');
EOF
            
            # Run the GraphQL generation script
            node generate-graphql.js
            
            # Clean up the temporary script
            rm generate-graphql.js
            
            echo "GraphQL code generated for $repo_name"
          else
            echo "No schema.sql found in $repo_name, using placeholder GraphQL code"
          fi
        done

    - name: Deploy Domain Workers
      shell: bash
      run: |
        # Parse the domain worker names JSON
        DOMAIN_WORKERS='${{ steps.parse-config.outputs.domain_workers }}'
        TEMP_DIRS='${{ steps.setup-template.outputs.temp_dirs }}'
        
        # Loop through each domain worker and deploy it
        echo "$DOMAIN_WORKERS" | jq -r 'to_entries[] | .value' | while read -r worker_name; do
          echo "Deploying domain worker: $worker_name"
          
          # Get the temp directory for this worker
          temp_dir=$(echo "$TEMP_DIRS" | jq -r --arg worker "$worker_name" '.[$worker]')
          
          # Deploy the worker
          cd "$temp_dir"
          npx wrangler deploy
          
          echo "Successfully deployed: $worker_name"
        done
      env:
        CLOUDFLARE_API_TOKEN: ${{ inputs.cloudflare_api_token }}
        CLOUDFLARE_ACCOUNT_ID: ${{ inputs.cloudflare_account_id }}

    - name: Cleanup Temporary Files
      shell: bash
      run: |
        # Parse the domain worker names JSON
        DOMAIN_WORKERS='${{ steps.parse-config.outputs.domain_workers }}'
        TEMP_DIRS='${{ steps.setup-template.outputs.temp_dirs }}'
        FRONTEND_TEMP_DIRS='${{ steps.clone-repos.outputs.frontend_temp_dirs }}'
        
        # Loop through each domain worker and cleanup
        echo "$DOMAIN_WORKERS" | jq -r 'to_entries[] | .value' | while read -r worker_name; do
          echo "Cleaning up temporary files for: $worker_name"
          
          # Get the temp directories
          temp_dir=$(echo "$TEMP_DIRS" | jq -r --arg worker "$worker_name" '.[$worker]')
          frontend_temp_dir=$(echo "$FRONTEND_TEMP_DIRS" | jq -r --arg worker "$worker_name" '.[$worker]')
          
          # Clean up temp directories
          if [ -n "$temp_dir" ] && [ -d "$temp_dir" ]; then
            rm -rf "$temp_dir"
          fi
          
          if [ -n "$frontend_temp_dir" ] && [ -d "$frontend_temp_dir" ]; then
            rm -rf "$frontend_temp_dir"
          fi
          
          echo "Cleanup completed for $worker_name"
        done