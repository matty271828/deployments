name: 'Setup Brevo Domain Authentication'
description: 'Automatically sets up domain authentication in Brevo for multiple domains'

inputs:
  brevo_api_key:
    description: 'Brevo API key for domain management'
    required: true
  cloudflare_account_id:
    description: 'Cloudflare Account ID'
    required: true
  cloudflare_api_token:
    description: 'Cloudflare API token'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get domains from R2
      id: get-domains
      shell: bash
      run: |
        echo "Retrieving domains from R2..."
        
        # Get domain mappings from R2
        MAPPINGS_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets/domain-mappings/objects/mappings.json" \
          -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
          -H "Content-Type: application/json")
        
        # Check if we got a valid response
        if ! echo "$MAPPINGS_RESPONSE" | jq empty 2>/dev/null; then
          echo "::error::Failed to retrieve domain mappings from R2"
          echo "$MAPPINGS_RESPONSE"
          exit 1
        fi
        
        # Check for errors
        if echo "$MAPPINGS_RESPONSE" | jq -e '.errors' > /dev/null; then
          echo "::error::Failed to get domain mappings"
          echo "$MAPPINGS_RESPONSE" | jq -r '.errors[0].message'
          exit 1
        fi
        
        # Store the domains as a single line JSON string
        echo "domains=$(echo "$MAPPINGS_RESPONSE" | jq -c '.')" >> $GITHUB_OUTPUT
        echo "Retrieved $(echo "$MAPPINGS_RESPONSE" | jq '. | length') domains from R2"

    - name: Process domains for Brevo authentication
      shell: bash
      run: |
        echo "Processing domains for Brevo authentication..."
        
        # Get the domains from the previous step
        DOMAINS='${{ steps.get-domains.outputs.domains }}'
        
        # Check if domains list is empty
        if [ "$DOMAINS" = "[]" ]; then
          echo "No domains found, skipping Brevo authentication setup"
          exit 0
        fi
        
        # Process each domain
        echo "$DOMAINS" | jq -c '.[]' | while read -r domain_obj; do
          DOMAIN=$(echo "$domain_obj" | jq -r '.domain')
          echo "Processing domain: $DOMAIN"
          
          # Check if domain already exists in Brevo
          DOMAIN_RESPONSE=$(curl -s -X GET "https://api.brevo.com/v3/domains" \
            -H "accept: application/json" \
            -H "api-key: ${{ inputs.brevo_api_key }}")
          
          DOMAIN_ID=$(echo "$DOMAIN_RESPONSE" | jq -r ".domains[] | select(.domain == \"$DOMAIN\") | .id")
          
          if [ "$DOMAIN_ID" != "null" ] && [ -n "$DOMAIN_ID" ]; then
            echo "✅ Domain $DOMAIN already exists in Brevo with ID: $DOMAIN_ID"
          else
            echo "Adding domain $DOMAIN to Brevo..."
            
            # Add domain to Brevo
            DOMAIN_ADD_RESPONSE=$(curl -s -X POST "https://api.brevo.com/v3/domains" \
              -H "accept: application/json" \
              -H "content-type: application/json" \
              -H "api-key: ${{ inputs.brevo_api_key }}" \
              -d "{\"domain\":\"$DOMAIN\"}")
            
            if echo "$DOMAIN_ADD_RESPONSE" | jq -e '.id' > /dev/null 2>&1; then
              DOMAIN_ID=$(echo "$DOMAIN_ADD_RESPONSE" | jq -r '.id')
              echo "✅ Domain $DOMAIN added to Brevo with ID: $DOMAIN_ID"
            else
              ERROR_MSG=$(echo "$DOMAIN_ADD_RESPONSE" | jq -r '.message // "Unknown error"')
              echo "❌ Failed to add domain $DOMAIN to Brevo: $ERROR_MSG"
              continue
            fi
          fi
          
          # Add sender to Brevo (regardless of domain existence)
          echo "Adding sender noreply@$DOMAIN to Brevo..."
          
          # Check if sender already exists
          SENDER_RESPONSE=$(curl -s -X GET "https://api.brevo.com/v3/senders" \
            -H "accept: application/json" \
            -H "api-key: ${{ inputs.brevo_api_key }}")
          
          if echo "$SENDER_RESPONSE" | jq -e ".senders[] | select(.email == \"noreply@$DOMAIN\")" > /dev/null 2>&1; then
            echo "✅ Sender noreply@$DOMAIN already exists in Brevo"
          else
            # Add sender
            SENDER_ADD_RESPONSE=$(curl -s -X POST "https://api.brevo.com/v3/senders" \
              -H "accept: application/json" \
              -H "content-type: application/json" \
              -H "api-key: ${{ inputs.brevo_api_key }}" \
              -d "{
                \"email\": \"noreply@$DOMAIN\",
                \"name\": \"$DOMAIN\"
              }")
            
            if echo "$SENDER_ADD_RESPONSE" | jq -e '.id' > /dev/null 2>&1; then
              echo "✅ Sender noreply@$DOMAIN added to Brevo"
            else
              ERROR_MSG=$(echo "$SENDER_ADD_RESPONSE" | jq -r '.message // "Unknown error"')
              echo "❌ Failed to add sender noreply@$DOMAIN: $ERROR_MSG"
            fi
          fi
          
          echo "---"
        done
        
        echo "✅ Brevo domain authentication setup completed for all domains"

    - name: Add DKIM records to Cloudflare
      shell: bash
      run: |
        echo "Adding DKIM records to Cloudflare..."
        
        # Get the domains from the previous step
        DOMAINS='${{ steps.get-domains.outputs.domains }}'
        
        # Check if domains list is empty
        if [ "$DOMAINS" = "[]" ]; then
          echo "No domains found, skipping DKIM record setup"
          exit 0
        fi
        
        # Process each domain
        echo "$DOMAINS" | jq -c '.[]' | while read -r domain_obj; do
          DOMAIN=$(echo "$domain_obj" | jq -r '.domain')
          echo "Processing DKIM for domain: $DOMAIN"
          
          # Get domain details from Brevo to extract DKIM record
          DOMAIN_RESPONSE=$(curl -s -X GET "https://api.brevo.com/v3/domains" \
            -H "accept: application/json" \
            -H "api-key: ${{ inputs.brevo_api_key }}")
          
          DOMAIN_ID=$(echo "$DOMAIN_RESPONSE" | jq -r ".domains[] | select(.domain == \"$DOMAIN\") | .id")
          
          if [ "$DOMAIN_ID" != "null" ] && [ -n "$DOMAIN_ID" ]; then
            # Get domain details
            DOMAIN_DETAILS=$(curl -s -X GET "https://api.brevo.com/v3/domains/$DOMAIN_ID" \
              -H "accept: application/json" \
              -H "api-key: ${{ inputs.brevo_api_key }}")
            
            # Extract DKIM record
            DKIM_RECORD=$(echo "$DOMAIN_DETAILS" | jq -r '.dnsRecords.dkim.record')
            
            if [ "$DKIM_RECORD" != "null" ] && [ -n "$DKIM_RECORD" ]; then
              echo "DKIM Record for $DOMAIN: $DKIM_RECORD"
              
              # Get zone ID for the domain
              ZONE_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones?name=$DOMAIN" \
                -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
                -H "Content-Type: application/json")
              
              ZONE_ID=$(echo "$ZONE_RESPONSE" | jq -r '.result[0].id')
              
              if [ "$ZONE_ID" != "null" ] && [ -n "$ZONE_ID" ]; then
                # Parse DKIM record (format: "name value")
                DKIM_NAME=$(echo "$DKIM_RECORD" | cut -d' ' -f1)
                DKIM_CONTENT=$(echo "$DKIM_RECORD" | cut -d' ' -f2-)
                
                # Check if DKIM record already exists
                EXISTING_DKIM=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records?name=$DKIM_NAME&type=TXT" \
                  -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
                  -H "Content-Type: application/json")
                
                if echo "$EXISTING_DKIM" | jq -e '.result[] | select(.content == "'$DKIM_CONTENT'")' > /dev/null 2>&1; then
                  echo "✅ DKIM record already exists for $DOMAIN"
                else
                  # Add DKIM record
                  DKIM_ADD_RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records" \
                    -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
                    -H "Content-Type: application/json" \
                    -d "{
                      \"type\": \"TXT\",
                      \"name\": \"$DKIM_NAME\",
                      \"content\": \"$DKIM_CONTENT\",
                      \"ttl\": 1
                    }")
                  
                  if echo "$DKIM_ADD_RESPONSE" | jq -e '.success' > /dev/null 2>&1; then
                    echo "✅ DKIM record added for $DOMAIN"
                  else
                    ERROR_MSG=$(echo "$DKIM_ADD_RESPONSE" | jq -r '.errors[0].message // "Unknown error"')
                    echo "❌ Failed to add DKIM record for $DOMAIN: $ERROR_MSG"
                  fi
                fi
              else
                echo "❌ Zone not found for domain $DOMAIN"
              fi
            else
              echo "⚠️ No DKIM record found for domain $DOMAIN (may need to wait for Brevo to generate it)"
            fi
          else
            echo "❌ Domain $DOMAIN not found in Brevo"
          fi
          
          echo "---"
        done
        
        echo "✅ DKIM record setup completed for all domains"

    - name: Wait for DNS propagation
      shell: bash
      run: |
        echo "Waiting for DNS propagation..."
        
        # Get the domains from the previous step
        DOMAINS='${{ steps.get-domains.outputs.domains }}'
        
        # Check if domains list is empty
        if [ "$DOMAINS" = "[]" ]; then
          echo "No domains found, skipping DNS propagation check"
          exit 0
        fi
        
        # Process each domain
        echo "$DOMAINS" | jq -c '.[]' | while read -r domain_obj; do
          DOMAIN=$(echo "$domain_obj" | jq -r '.domain')
          echo "Waiting for DNS propagation for domain: $DOMAIN"
          
          # Wait for DNS propagation (up to 10 minutes)
          for i in {1..60}; do
            echo "Checking DNS propagation (attempt $i/60)..."
            
            # Check if SPF record is available
            SPF_CHECK=$(dig TXT @8.8.8.8 "$DOMAIN" +short | grep "v=spf1" || echo "")
            
            # Check if DKIM record is available (get DKIM name first)
            DKIM_NAME=""
            DOMAIN_RESPONSE=$(curl -s -X GET "https://api.brevo.com/v3/domains" \
              -H "accept: application/json" \
              -H "api-key: ${{ inputs.brevo_api_key }}")
            
            DOMAIN_ID=$(echo "$DOMAIN_RESPONSE" | jq -r ".domains[] | select(.domain == \"$DOMAIN\") | .id")
            
            if [ "$DOMAIN_ID" != "null" ] && [ -n "$DOMAIN_ID" ]; then
              DOMAIN_DETAILS=$(curl -s -X GET "https://api.brevo.com/v3/domains/$DOMAIN_ID" \
                -H "accept: application/json" \
                -H "api-key: ${{ inputs.brevo_api_key }}")
              DKIM_RECORD=$(echo "$DOMAIN_DETAILS" | jq -r '.dnsRecords.dkim.record')
              if [ "$DKIM_RECORD" != "null" ] && [ -n "$DKIM_RECORD" ]; then
                DKIM_NAME=$(echo "$DKIM_RECORD" | cut -d' ' -f1)
              fi
            fi
            
            DKIM_CHECK=""
            if [ -n "$DKIM_NAME" ]; then
              DKIM_CHECK=$(dig TXT @8.8.8.8 "$DKIM_NAME" +short | grep "v=DKIM1" || echo "")
            fi
            
            echo "SPF available: $([ -n "$SPF_CHECK" ] && echo "✅" || echo "❌")"
            echo "DKIM available: $([ -n "$DKIM_CHECK" ] && echo "✅" || echo "❌")"
            
            if [ -n "$SPF_CHECK" ] && [ -n "$DKIM_CHECK" ]; then
              echo "✅ DNS propagation complete for $DOMAIN"
              break
            elif [ $i -eq 60 ]; then
              echo "❌ DNS propagation timeout after 10 minutes for domain $DOMAIN"
              echo "SPF available: $([ -n "$SPF_CHECK" ] && echo "✅" || echo "❌")"
              echo "DKIM available: $([ -n "$DKIM_CHECK" ] && echo "✅" || echo "❌")"
              echo "::error::DNS propagation failed for domain $DOMAIN after 10 minutes"
              exit 1
            else
              sleep 10
            fi
          done
          
          echo "---"
        done
        
        echo "✅ DNS propagation check completed"

    - name: Verify domain validation
      shell: bash
      run: |
        echo "Verifying domain validation..."
        
        # Get the domains from the previous step
        DOMAINS='${{ steps.get-domains.outputs.domains }}'
        
        # Check if domains list is empty
        if [ "$DOMAINS" = "[]" ]; then
          echo "No domains found, skipping domain validation verification"
          exit 0
        fi
        
        # Process each domain
        echo "$DOMAINS" | jq -c '.[]' | while read -r domain_obj; do
          DOMAIN=$(echo "$domain_obj" | jq -r '.domain')
          echo "Verifying domain: $DOMAIN"
          
          # Get domain details from Brevo
          DOMAIN_RESPONSE=$(curl -s -X GET "https://api.brevo.com/v3/domains" \
            -H "accept: application/json" \
            -H "api-key: ${{ inputs.brevo_api_key }}")
          
          DOMAIN_ID=$(echo "$DOMAIN_RESPONSE" | jq -r ".domains[] | select(.domain == \"$DOMAIN\") | .id")
          
          if [ "$DOMAIN_ID" != "null" ] && [ -n "$DOMAIN_ID" ]; then
            # Get detailed domain information
            DOMAIN_DETAILS=$(curl -s -X GET "https://api.brevo.com/v3/domains/$DOMAIN_ID" \
              -H "accept: application/json" \
              -H "api-key: ${{ inputs.brevo_api_key }}")
            
            DOMAIN_STATUS=$(echo "$DOMAIN_DETAILS" | jq -r '.status')
            SPF_STATUS=$(echo "$DOMAIN_DETAILS" | jq -r '.dnsRecords.spf.status')
            DKIM_STATUS=$(echo "$DOMAIN_DETAILS" | jq -r '.dnsRecords.dkim.status')
            
            echo "Domain Status: $DOMAIN_STATUS"
            echo "SPF Status: $SPF_STATUS"
            echo "DKIM Status: $DKIM_STATUS"
            
            if [ "$DOMAIN_STATUS" = "valid" ] && [ "$SPF_STATUS" = "valid" ] && [ "$DKIM_STATUS" = "valid" ]; then
              echo "✅ Domain $DOMAIN is fully validated and ready for email sending"
            else
              echo "⚠️ Domain $DOMAIN validation status:"
              echo "   - Overall: $DOMAIN_STATUS"
              echo "   - SPF: $SPF_STATUS"
              echo "   - DKIM: $DKIM_STATUS"
            fi
          else
            echo "❌ Domain $DOMAIN not found in Brevo"
          fi
          
          echo "---"
        done
        
        echo "✅ Domain validation verification completed" 