name: 'Setup Brevo Domain Authentication'
description: 'Automatically sets up domain authentication in Brevo for multiple domains'

inputs:
  brevo_api_key:
    description: 'Brevo API key for domain management'
    required: true
  cloudflare_account_id:
    description: 'Cloudflare Account ID'
    required: true
  cloudflare_api_token:
    description: 'Cloudflare API token'
    required: true
  support_email:
    description: 'Email address to forward support emails to'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get domains from R2
      id: get-domains
      shell: bash
      run: |
        echo "Retrieving domains from R2..."
        
        # Get domain mappings from R2
        MAPPINGS_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets/domain-mappings/objects/mappings.json" \
          -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
          -H "Content-Type: application/json")
        
        echo "Raw response from R2:"
        echo "$MAPPINGS_RESPONSE"
        
        # Check if we got a valid response
        if ! echo "$MAPPINGS_RESPONSE" | jq empty 2>/dev/null; then
          echo "::error::Failed to retrieve domain mappings from R2 - invalid JSON"
          echo "$MAPPINGS_RESPONSE"
          exit 1
        fi
        
        # Check if response is an array (success case) or has errors
        if echo "$MAPPINGS_RESPONSE" | jq -e 'type == "array"' > /dev/null; then
          # Response is an array, which is what we expect
          echo "✅ Successfully retrieved domain mappings from R2"
        elif echo "$MAPPINGS_RESPONSE" | jq -e '.errors' > /dev/null; then
          # Response has errors
          echo "::error::Failed to get domain mappings"
          echo "$MAPPINGS_RESPONSE" | jq -r '.errors[0].message'
          exit 1
        else
          echo "::error::Unexpected response format from R2"
          echo "$MAPPINGS_RESPONSE"
          exit 1
        fi
        
        # Store the domains as a single line JSON string
        echo "domains=$(echo "$MAPPINGS_RESPONSE" | jq -c '.')" >> $GITHUB_OUTPUT
        echo "Retrieved $(echo "$MAPPINGS_RESPONSE" | jq '. | length') domains from R2"

    - name: Process domains for Brevo authentication
      shell: bash
      run: |
        echo "Processing domains for Brevo authentication..."
        
        # Get the domains from the previous step
        DOMAINS='${{ steps.get-domains.outputs.domains }}'
        
        echo "Domains from step output: $DOMAINS"
        
        # Check if domains list is empty or null
        if [ "$DOMAINS" = "[]" ] || [ "$DOMAINS" = "null" ] || [ -z "$DOMAINS" ]; then
          echo "No domains found, skipping Brevo authentication setup"
          exit 0
        fi
        
        # Validate that domains is a valid JSON array
        if ! echo "$DOMAINS" | jq -e 'type == "array"' > /dev/null; then
          echo "::error::Invalid domains format - expected JSON array"
          echo "Domains: $DOMAINS"
          exit 1
        fi
        
        # Process each domain
        echo "$DOMAINS" | jq -c '.[]' | while read -r domain_obj; do
          DOMAIN=$(echo "$domain_obj" | jq -r '.domain')
          echo "Processing domain: $DOMAIN"
          
          # Step 1: Check if domain already exists in Brevo
          echo "Step 1: Checking if domain exists..."
          DOMAIN_RESPONSE=$(curl -s -X GET "https://api.brevo.com/v3/senders/domains" \
            -H "accept: application/json" \
            -H "api-key: ${{ inputs.brevo_api_key }}")
          
          # Check if the response is valid JSON
          if ! echo "$DOMAIN_RESPONSE" | jq empty 2>/dev/null; then
            echo "❌ Invalid JSON response from Brevo API"
            echo "$DOMAIN_RESPONSE"
            continue
          fi
          
          # Check if the response has the expected structure
          if ! echo "$DOMAIN_RESPONSE" | jq -e '.domains' > /dev/null 2>&1; then
            echo "❌ Unexpected response structure from Brevo API"
            echo "$DOMAIN_RESPONSE"
            continue
          fi
          
          DOMAIN_ID=$(echo "$DOMAIN_RESPONSE" | jq -r ".domains[] | select(.domain_name == \"$DOMAIN\") | .id // empty")
          
          if [ "$DOMAIN_ID" != "null" ] && [ -n "$DOMAIN_ID" ]; then
            echo "✅ Domain $DOMAIN already exists in Brevo with ID: $DOMAIN_ID"
            # Get full domain details using individual domain endpoint
            DOMAIN_DETAILS=$(curl -s -X GET "https://api.brevo.com/v3/senders/domains/$DOMAIN" \
              -H "accept: application/json" \
              -H "api-key: ${{ inputs.brevo_api_key }}")
          else
            # Creating domain if it doesn't exist
            echo "Creating domain..."
            echo "Adding domain $DOMAIN to Brevo..."
            
            # Add domain to Brevo
            DOMAIN_ADD_RESPONSE=$(curl -s -X POST "https://api.brevo.com/v3/senders/domains" \
              -H "accept: application/json" \
              -H "content-type: application/json" \
              -H "api-key: ${{ inputs.brevo_api_key }}" \
              -d "{\"name\":\"$DOMAIN\"}")
            
            if echo "$DOMAIN_ADD_RESPONSE" | jq -e '.id' > /dev/null 2>&1; then
              DOMAIN_ID=$(echo "$DOMAIN_ADD_RESPONSE" | jq -r '.id')
              echo "✅ Domain $DOMAIN added to Brevo with ID: $DOMAIN_ID"
              # Use domain details from the creation response
              DOMAIN_DETAILS="$DOMAIN_ADD_RESPONSE"
            else
              ERROR_MSG=$(echo "$DOMAIN_ADD_RESPONSE" | jq -r '.message // "Unknown error"')
              echo "❌ Failed to add domain $DOMAIN to Brevo: $ERROR_MSG"
              continue
            fi
          fi
          
          # Retrieve Cloudflare zone ID for the domain
          ZONE_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones?name=$DOMAIN" \
            -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
            -H "Content-Type: application/json")
          ZONE_ID=$(echo "$ZONE_RESPONSE" | jq -r '.result[0].id')
          echo "DEBUG: ZONE_ID for $DOMAIN is '$ZONE_ID'"
          if [ "$ZONE_ID" = "null" ] || [ -z "$ZONE_ID" ]; then
            echo "::error::Zone ID not found for domain $DOMAIN"
            exit 1
          fi
          
          # Step 2: Add DNS records to Cloudflare
          echo "Step 2: Adding DNS records to Cloudflare..."
          
          # DMARC record (as specified)
          DMARC_HOST="_dmarc"
          DMARC_VALUE='"v=DMARC1; p=none; rua=mailto:rua@dmarc.brevo.com"'
          echo "Adding DMARC record: $DMARC_HOST -> $DMARC_VALUE"
          EXISTING_DMARC=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records?name=$DMARC_HOST&type=TXT" \
            -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
            -H "Content-Type: application/json")
          if echo "$EXISTING_DMARC" | jq -e '.result[] | select(.content == "v=DMARC1; p=none; rua=mailto:rua@dmarc.brevo.com")' > /dev/null 2>&1; then
            echo "✅ DMARC record already exists for $DOMAIN"
          else
            DMARC_ADD_RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records" \
              -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
              -H "Content-Type: application/json" \
              -d "{\"type\": \"TXT\", \"name\": \"$DMARC_HOST\", \"content\": $DMARC_VALUE, \"ttl\": 1}")
            if echo "$DMARC_ADD_RESPONSE" | jq -e '.success' > /dev/null 2>&1; then
              echo "✅ DMARC record added for $DOMAIN"
            else
              ERROR_MSG=$(echo "$DMARC_ADD_RESPONSE" | jq -r '.errors[0].message // "Unknown error"')
              if [[ "$ERROR_MSG" == *"already exists"* ]]; then
                echo "✅ DMARC record already exists for $DOMAIN (detected via error)"
              else
                echo "❌ Failed to add DMARC record for $DOMAIN: $ERROR_MSG"
              fi
            fi
          fi
          
          # Add DKIM1 record if present
          DKIM1_HOST=$(echo "$DOMAIN_DETAILS" | jq -r '.dns_records.dkim1Record.host_name // empty')
          DKIM1_VALUE=$(echo "$DOMAIN_DETAILS" | jq -r '.dns_records.dkim1Record.value // empty')
          if [ "$DKIM1_HOST" != "null" ] && [ -n "$DKIM1_HOST" ] && [ "$DKIM1_HOST" != "" ] && [ "$DKIM1_VALUE" != "null" ] && [ -n "$DKIM1_VALUE" ]; then
            echo "Adding DKIM1 record: $DKIM1_HOST -> $DKIM1_VALUE"
            EXISTING_DKIM1=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records?name=$DKIM1_HOST&type=CNAME" \
              -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
              -H "Content-Type: application/json")
            if echo "$EXISTING_DKIM1" | jq -e '.result[] | select(.content == "'$DKIM1_VALUE'")' > /dev/null 2>&1; then
              echo "✅ DKIM1 record already exists for $DOMAIN"
            else
              DKIM1_ADD_RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records" \
                -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
                -H "Content-Type: application/json" \
                -d "{\"type\": \"CNAME\", \"name\": \"$DKIM1_HOST\", \"content\": \"$DKIM1_VALUE\", \"ttl\": 1}")
              if echo "$DKIM1_ADD_RESPONSE" | jq -e '.success' > /dev/null 2>&1; then
                echo "✅ DKIM1 record added for $DOMAIN"
              else
                ERROR_MSG=$(echo "$DKIM1_ADD_RESPONSE" | jq -r '.errors[0].message // "Unknown error"')
                if [[ "$ERROR_MSG" == *"already exists"* ]]; then
                  echo "✅ DKIM1 record already exists for $DOMAIN (detected via error)"
                else
                  echo "❌ Failed to add DKIM1 record for $DOMAIN: $ERROR_MSG"
                fi
              fi
            fi
          fi
          
          # Add DKIM2 record if present
          DKIM2_HOST=$(echo "$DOMAIN_DETAILS" | jq -r '.dns_records.dkim2Record.host_name // empty')
          DKIM2_VALUE=$(echo "$DOMAIN_DETAILS" | jq -r '.dns_records.dkim2Record.value // empty')
          if [ "$DKIM2_HOST" != "null" ] && [ -n "$DKIM2_HOST" ] && [ "$DKIM2_HOST" != "" ] && [ "$DKIM2_VALUE" != "null" ] && [ -n "$DKIM2_VALUE" ]; then
            echo "Adding DKIM2 record: $DKIM2_HOST -> $DKIM2_VALUE"
            EXISTING_DKIM2=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records?name=$DKIM2_HOST&type=CNAME" \
              -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
              -H "Content-Type: application/json")
            if echo "$EXISTING_DKIM2" | jq -e '.result[] | select(.content == "'$DKIM2_VALUE'")' > /dev/null 2>&1; then
              echo "✅ DKIM2 record already exists for $DOMAIN"
            else
              DKIM2_ADD_RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records" \
                -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
                -H "Content-Type: application/json" \
                -d "{\"type\": \"CNAME\", \"name\": \"$DKIM2_HOST\", \"content\": \"$DKIM2_VALUE\", \"ttl\": 1}")
              if echo "$DKIM2_ADD_RESPONSE" | jq -e '.success' > /dev/null 2>&1; then
                echo "✅ DKIM2 record added for $DOMAIN"
              else
                ERROR_MSG=$(echo "$DKIM2_ADD_RESPONSE" | jq -r '.errors[0].message // "Unknown error"')
                if [[ "$ERROR_MSG" == *"already exists"* ]]; then
                  echo "✅ DKIM2 record already exists for $DOMAIN (detected via error)"
                else
                  echo "❌ Failed to add DKIM2 record for $DOMAIN: $ERROR_MSG"
                fi
              fi
            fi
          fi
          
          # Add Brevo code record - handle both response formats
          BREVO_CODE_HOST=$(echo "$DOMAIN_DETAILS" | jq -r '.dns_records.brevo_code.host_name // empty')
          BREVO_CODE_VALUE_RAW=$(echo "$DOMAIN_DETAILS" | jq -r '.dns_records.brevo_code.value // empty')
          BREVO_CODE_VALUE="\"$BREVO_CODE_VALUE_RAW\""
          if [ "$BREVO_CODE_HOST" != "null" ] && [ -n "$BREVO_CODE_HOST" ] && [ "$BREVO_CODE_HOST" != "" ] && [ "$BREVO_CODE_VALUE_RAW" != "null" ] && [ -n "$BREVO_CODE_VALUE_RAW" ]; then
            echo "Adding Brevo code record: $BREVO_CODE_HOST -> $BREVO_CODE_VALUE"
            EXISTING_BREVO_CODE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records?name=$BREVO_CODE_HOST&type=TXT" \
              -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
              -H "Content-Type: application/json")
            if echo "$EXISTING_BREVO_CODE" | jq -e '.result[] | select(.content == "$BREVO_CODE_VALUE_RAW")' > /dev/null 2>&1; then
              echo "✅ Brevo code record already exists for $DOMAIN"
            else
              BREVO_CODE_ADD_RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records" \
                -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
                -H "Content-Type: application/json" \
                -d "{\"type\": \"TXT\", \"name\": \"$BREVO_CODE_HOST\", \"content\": $BREVO_CODE_VALUE, \"ttl\": 1}")
              if echo "$BREVO_CODE_ADD_RESPONSE" | jq -e '.success' > /dev/null 2>&1; then
                echo "✅ Brevo code record added for $DOMAIN"
              else
                ERROR_MSG=$(echo "$BREVO_CODE_ADD_RESPONSE" | jq -r '.errors[0].message // "Unknown error"')
                if [[ "$ERROR_MSG" == *"already exists"* ]]; then
                  echo "✅ Brevo code record already exists for $DOMAIN (detected via error)"
                else
                  echo "❌ Failed to add Brevo code record for $DOMAIN: $ERROR_MSG"
                fi
              fi
            fi
          else
            echo "⚠️ No valid Brevo code record found for domain $DOMAIN"
            echo "DEBUG: BREVO_CODE_HOST='$BREVO_CODE_HOST', BREVO_CODE_VALUE='$BREVO_CODE_VALUE_RAW'"
          fi
          
          # Step 3: Wait for DNS propagation (after adding records)
          echo "Step 3: Waiting for DNS propagation..."
          
          # Gather DKIM1 and DKIM2 hostnames for propagation check
          DKIM1_HOST=$(echo "$DOMAIN_DETAILS" | jq -r '.dns_records.dkim1Record.host_name // empty')
          DKIM2_HOST=$(echo "$DOMAIN_DETAILS" | jq -r '.dns_records.dkim2Record.host_name // empty')
          
          # Debug: Print the hostnames we'll be checking
          echo "DEBUG: Will check DNS propagation for:"
          echo "  - Brevo Code: $BREVO_CODE_HOST"
          echo "  - DKIM1: $DKIM1_HOST"
          echo "  - DKIM2: $DKIM2_HOST"
          
          # Check if we have all required hostnames to validate
          VALID_HOSTNAMES=0
          MISSING_HOSTNAMES=""
          if [ "$BREVO_CODE_HOST" != "null" ] && [ -n "$BREVO_CODE_HOST" ] && [ "$BREVO_CODE_HOST" != "" ]; then
            VALID_HOSTNAMES=$((VALID_HOSTNAMES + 1))
          else
            MISSING_HOSTNAMES="$MISSING_HOSTNAMES Brevo code"
          fi
          DKIM_HOSTS_PRESENT=0
          if [ "$DKIM1_HOST" != "null" ] && [ -n "$DKIM1_HOST" ] && [ "$DKIM1_HOST" != "" ]; then
            DKIM_HOSTS_PRESENT=$((DKIM_HOSTS_PRESENT + 1))
          fi
          if [ "$DKIM2_HOST" != "null" ] && [ -n "$DKIM2_HOST" ] && [ "$DKIM2_HOST" != "" ]; then
            DKIM_HOSTS_PRESENT=$((DKIM_HOSTS_PRESENT + 1))
          fi
          if [ $VALID_HOSTNAMES -lt 1 ] || [ $DKIM_HOSTS_PRESENT -eq 0 ]; then
            echo "::error::Missing required DNS record hostnames for domain $DOMAIN: $MISSING_HOSTNAMES DKIM"
            echo "DEBUG: BREVO_CODE_HOST='$BREVO_CODE_HOST', DKIM1_HOST='$DKIM1_HOST', DKIM2_HOST='$DKIM2_HOST'"
            echo "Cannot proceed with DNS validation without all required hostnames"
            exit 1
          fi
          echo "DEBUG: Found required hostnames (Brevo code + at least one DKIM)"
          
          # Wait for DNS propagation (up to 10 minutes)
          for i in {1..60}; do
            echo "Checking DNS propagation (attempt $i/60)..."
            # Check Brevo code
            if [ "$BREVO_CODE_HOST" = "@" ]; then
              echo "DEBUG: Checking Brevo code record for root domain '$DOMAIN'"
              BREVO_CODE_CHECK=$(dig TXT @8.8.8.8 "$DOMAIN" +short | grep "brevo-code" || echo "")
            else
              echo "DEBUG: Checking Brevo code record for '$BREVO_CODE_HOST'"
              BREVO_CODE_CHECK=$(dig TXT @8.8.8.8 "$BREVO_CODE_HOST" +short | grep "brevo-code" || echo "")
            fi
            # Check DKIM1
            DKIM1_CHECK=""
            if [ -n "$DKIM1_HOST" ]; then
              echo "DEBUG: Checking DKIM1 record for '$DKIM1_HOST.$DOMAIN'"
              DKIM1_CHECK=$(dig CNAME @8.8.8.8 "$DKIM1_HOST.$DOMAIN" +short | grep "brevo" || echo "")
            fi
            # Check DKIM2
            DKIM2_CHECK=""
            if [ -n "$DKIM2_HOST" ]; then
              echo "DEBUG: Checking DKIM2 record for '$DKIM2_HOST.$DOMAIN'"
              DKIM2_CHECK=$(dig CNAME @8.8.8.8 "$DKIM2_HOST.$DOMAIN" +short | grep "brevo" || echo "")
            fi
            echo "Brevo code available: $([ -n "$BREVO_CODE_CHECK" ] && echo "✅" || echo "❌")"
            echo "DKIM1 available: $([ -n "$DKIM1_CHECK" ] && echo "✅" || echo "❌")"
            echo "DKIM2 available: $([ -n "$DKIM2_CHECK" ] && echo "✅" || echo "❌")"
            # Require Brevo code and at least one DKIM to be propagated
            if [ -n "$BREVO_CODE_CHECK" ] && { [ -n "$DKIM1_CHECK" ] || [ -n "$DKIM2_CHECK" ]; }; then
              echo "✅ DNS propagation complete for $DOMAIN"
              break
            elif [ $i -eq 60 ]; then
              echo "❌ DNS propagation timeout after 10 minutes for domain $DOMAIN"
              echo "Brevo code available: $([ -n "$BREVO_CODE_CHECK" ] && echo "✅" || echo "❌")"
              echo "DKIM1 available: $([ -n "$DKIM1_CHECK" ] && echo "✅" || echo "❌")"
              echo "DKIM2 available: $([ -n "$DKIM2_CHECK" ] && echo "✅" || echo "❌")"
              echo "::warning::DNS propagation failed for domain $DOMAIN after 10 minutes, but continuing..."
            else
              sleep 10
            fi
          done
          
          # Step 4: Authenticate domain
          echo "Step 4: Authenticating domain..."
          AUTH_RESPONSE=$(curl -s -X PUT "https://api.brevo.com/v3/senders/domains/$DOMAIN/authenticate" \
            -H "accept: application/json" \
            -H "api-key: ${{ inputs.brevo_api_key }}")
          if echo "$AUTH_RESPONSE" | jq -e '.success' > /dev/null 2>&1; then
            echo "✅ Domain authentication triggered for $DOMAIN"
          else
            echo "⚠️ Failed to trigger domain authentication for $DOMAIN (may already be authenticated)"
            echo "$AUTH_RESPONSE"
          fi

          # Step 5: Add senders to Brevo (noreply@<domain> and support@<domain>)
          echo "Adding senders to Brevo..."
          
          # Add noreply@<domain> sender
          NOREPLY_EMAIL="noreply@$DOMAIN"
          echo "Adding sender $NOREPLY_EMAIL to Brevo..."
          SENDER_RESPONSE=$(curl -s -X GET "https://api.brevo.com/v3/senders" \
            -H "accept: application/json" \
            -H "api-key: ${{ inputs.brevo_api_key }}")
          if echo "$SENDER_RESPONSE" | jq -e ".senders[] | select(.email == \"$NOREPLY_EMAIL\")" > /dev/null 2>&1; then
            echo "✅ Sender $NOREPLY_EMAIL already exists in Brevo"
          else
            NOREPLY_ADD_RESPONSE=$(curl -s -X POST "https://api.brevo.com/v3/senders" \
              -H "accept: application/json" \
              -H "content-type: application/json" \
              -H "api-key: ${{ inputs.brevo_api_key }}" \
              -d "{\"email\": \"$NOREPLY_EMAIL\", \"name\": \"$DOMAIN\"}")
            if echo "$NOREPLY_ADD_RESPONSE" | jq -e '.id' > /dev/null 2>&1; then
              echo "✅ Sender $NOREPLY_EMAIL added to Brevo"
            else
              ERROR_MSG=$(echo "$NOREPLY_ADD_RESPONSE" | jq -r '.message // "Unknown error"')
              echo "❌ Failed to add sender $NOREPLY_EMAIL: $ERROR_MSG"
            fi
          fi
          
          # Add support@<domain> sender
          SUPPORT_EMAIL="support@$DOMAIN"
          echo "Adding sender $SUPPORT_EMAIL to Brevo..."
          if echo "$SENDER_RESPONSE" | jq -e ".senders[] | select(.email == \"$SUPPORT_EMAIL\")" > /dev/null 2>&1; then
            echo "✅ Sender $SUPPORT_EMAIL already exists in Brevo"
          else
            SUPPORT_ADD_RESPONSE=$(curl -s -X POST "https://api.brevo.com/v3/senders" \
              -H "accept: application/json" \
              -H "content-type: application/json" \
              -H "api-key: ${{ inputs.brevo_api_key }}" \
              -d "{\"email\": \"$SUPPORT_EMAIL\", \"name\": \"$DOMAIN Support\"}")
            if echo "$SUPPORT_ADD_RESPONSE" | jq -e '.id' > /dev/null 2>&1; then
              echo "✅ Sender $SUPPORT_EMAIL added to Brevo"
            else
              ERROR_MSG=$(echo "$SUPPORT_ADD_RESPONSE" | jq -r '.message // "Unknown error"')
              echo "❌ Failed to add sender $SUPPORT_EMAIL: $ERROR_MSG"
            fi
          fi
          
          # Step 6: Set up email routing for support emails
          echo "Step 6: Setting up email routing for support emails on $DOMAIN..."
          
          # Use the support email from the input parameter
          FORWARD_TO_EMAIL="${{ inputs.support_email }}"
          
          # Step 6a: Enable Email Routing for the zone (adds MX and SPF records)
          echo "Step 6a: Enabling Email Routing for $DOMAIN zone..."
          ENABLE_EMAIL_ROUTING_RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/email/routing/dns" \
            -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
            -H "Content-Type: application/json")
          
          if echo "$ENABLE_EMAIL_ROUTING_RESPONSE" | jq -e '.success' > /dev/null 2>&1; then
            echo "✅ Email routing enabled for $DOMAIN zone (MX and SPF records added)"
          else
            ERROR_MSG=$(echo "$ENABLE_EMAIL_ROUTING_RESPONSE" | jq -r '.errors[0].message // "Unknown error"')
            if [[ "$ERROR_MSG" == *"already enabled"* ]] || [[ "$ERROR_MSG" == *"already exists"* ]]; then
              echo "✅ Email routing already enabled for $DOMAIN zone"
            else
              echo "⚠️ Failed to enable email routing for $DOMAIN zone: $ERROR_MSG"
              echo "You may need to manually enable Email Routing in Cloudflare dashboard"
            fi
          fi
          
          # Step 6b: Create destination address for email forwarding
          echo "Step 6b: Creating destination address for email forwarding..."
          DESTINATION_RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/email/routing/addresses" \
            -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
            -H "Content-Type: application/json" \
            -d "{\"email\": \"$FORWARD_TO_EMAIL\"}")
          
          if echo "$DESTINATION_RESPONSE" | jq -e '.success' > /dev/null 2>&1; then
            echo "✅ Destination address created for $FORWARD_TO_EMAIL"
          else
            ERROR_MSG=$(echo "$DESTINATION_RESPONSE" | jq -r '.errors[0].message // "Unknown error"')
            if [[ "$ERROR_MSG" == *"already exists"* ]] || [[ "$ERROR_MSG" == *"already been added"* ]]; then
              echo "✅ Destination address already exists for $FORWARD_TO_EMAIL"
            else
              echo "⚠️ Failed to create destination address: $ERROR_MSG"
              echo "You may need to manually add the destination address in Cloudflare dashboard"
            fi
          fi
          
          # Step 6c: Create forwarding rule for support@domain.com (root domain)
          echo "Step 6c: Creating email forwarding rule for support@$DOMAIN..."
          
          # Check if the forwarding rule already exists for root domain
          EXISTING_RULES_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/email/routing/rules" \
            -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
            -H "Content-Type: application/json")
          
          RULE_EXISTS=false
          if echo "$EXISTING_RULES_RESPONSE" | jq -e '.result[] | select(.matchers[0].value == "support@'$DOMAIN'")' > /dev/null 2>&1; then
            echo "✅ Email forwarding rule already exists for support@$DOMAIN"
            RULE_EXISTS=true
          fi
          
          if [ "$RULE_EXISTS" = false ]; then
            # Create forwarding rule for support@domain (root domain)
            FORWARD_RULE_RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/email/routing/rules" \
              -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
              -H "Content-Type: application/json" \
              -d "{
                \"actions\": [
                  {
                    \"type\": \"forward\",
                    \"value\": [\"$FORWARD_TO_EMAIL\"]
                  }
                ],
                \"matchers\": [
                  {
                    \"type\": \"literal\",
                    \"field\": \"to\",
                    \"value\": \"support@$DOMAIN\"
                  }
                ],
                \"enabled\": true,
                \"name\": \"Forward support emails to $FORWARD_TO_EMAIL for $DOMAIN\"
              }")
            
            if echo "$FORWARD_RULE_RESPONSE" | jq -e '.success' > /dev/null 2>&1; then
              echo "✅ Email forwarding rule created for support@$DOMAIN → $FORWARD_TO_EMAIL"
            else
              ERROR_MSG=$(echo "$FORWARD_RULE_RESPONSE" | jq -r '.errors[0].message // "Unknown error"')
              if [[ "$ERROR_MSG" == *"already exists"* ]]; then
                echo "✅ Email forwarding rule already exists for support@$DOMAIN"
              else
                echo "⚠️ Failed to create email forwarding rule: $ERROR_MSG"
                echo "You may need to manually set up forwarding in Cloudflare dashboard"
              fi
            fi
          fi
          
          echo "✅ Support email routing configured for $DOMAIN:"
          echo "   • support@$DOMAIN → $FORWARD_TO_EMAIL"
          
          echo "---"
        done
        
        echo "✅ Brevo domain setup completed for all domains" 