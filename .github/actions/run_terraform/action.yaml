name: 'Terraform Apply'
description: 'Apply Terraform configuration'

inputs:
  domain:
    description: 'Domain name for the deployment'
    required: true
  cloudflare_account_id:
    description: 'Cloudflare Account ID'
    required: true
  cloudflare_api_token:
    description: 'Cloudflare API Token'
    required: true
  GH_PERSONAL_ACCESS_TOKEN:
    description: 'GitHub Personal Access Token'
    required: true
  digital_ocean_api_token:
    description: 'DigitalOcean API Token'
    required: true
  digital_ocean_ssh_key_name:
    description: 'DigitalOcean SSH Key Name'
    required: true
  digital_ocean_ssh_private_key:
    description: 'DigitalOcean API Key Token'
    required: true

outputs:
  terraform_error:
    description: 'Indicates if there was an error in Terraform operations'
    value: ${{ steps.terraform.outputs.terraform_error }}
  droplet_ip:
    description: 'IP address of the created Digital Ocean droplet'
    value: ${{ steps.terraform.outputs.droplet_ip }}

runs:
  using: "composite"
  steps:
    - name: Fetch Terraform Files
      shell: bash
      run: |
        git fetch origin main
        git checkout origin/main -- terraform/ || true

    - name: Terraform Init
      id: init
      working-directory: ./terraform
      shell: bash
      run: |
        terraform init -upgrade 

    - name: Terraform Plan
      id: plan
      needs: init
      working-directory: ./terraform
      shell: bash
      run: |
        set +e
        timeout 900 terraform plan -out=tfplan
        exit_code=$?
        if [ $exit_code -eq 124 ]; then
          echo "::error::Terraform plan timed out after 15 minutes"
          echo "terraform_error=true" >> $GITHUB_OUTPUT
          exit 1
        elif [ $exit_code -ne 0 ]; then
          echo "terraform_error=true" >> $GITHUB_OUTPUT
        else
          echo "terraform_error=false" >> $GITHUB_OUTPUT
        fi
        exit $exit_code
      env:
        TF_VAR_cloudflare_account_id: ${{ inputs.cloudflare_account_id }}
        TF_VAR_cloudflare_api_token: ${{ inputs.cloudflare_api_token }}
        TF_VAR_domain: ${{ inputs.domain }}
        TF_VAR_digital_ocean_api_token: ${{ inputs.digital_ocean_api_token }}
        TF_VAR_digital_ocean_ssh_key_name: ${{ inputs.digital_ocean_ssh_key_name }}
        TF_VAR_digital_ocean_ssh_private_key: ${{ inputs.digital_ocean_ssh_private_key }}
        TF_LOG: DEBUG

    - name: Terraform Apply
      id: apply
      needs: [init, plan]
      shell: bash
      working-directory: ./terraform
      run: |
        set +e
        timeout 900 terraform apply -auto-approve
        exit_code=$?
        if [ $exit_code -eq 124 ]; then
          echo "::error::Terraform apply timed out after 15 minutes"
          echo "terraform_error=true" >> $GITHUB_OUTPUT
          exit 1
        elif [ $exit_code -ne 0 ]; then
          echo "terraform_error=true" >> $GITHUB_OUTPUT
        else
          echo "terraform_error=false" >> $GITHUB_OUTPUT
          # Capture the droplet IP from Terraform output
          DROPLET_IP=$(terraform output -raw droplet_ip)
          echo "droplet_ip=$DROPLET_IP" >> $GITHUB_OUTPUT
        fi
        exit $exit_code
      env:
        TF_VAR_cloudflare_account_id: ${{ inputs.cloudflare_account_id }}
        TF_VAR_cloudflare_api_token: ${{ inputs.cloudflare_api_token }}
        TF_VAR_domain: ${{ inputs.domain }}
        TF_VAR_digital_ocean_api_token: ${{ inputs.digital_ocean_api_token }}
        TF_VAR_digital_ocean_ssh_key_name: ${{ inputs.digital_ocean_ssh_key_name }}
        TF_VAR_digital_ocean_ssh_private_key: ${{ inputs.digital_ocean_ssh_private_key }}
        TF_LOG: DEBUG

    - name: Check for Terraform Errors
      id: check_errors
      needs: apply
      shell: bash
      run: |
        if [ "${{ steps.apply.outputs.terraform_error }}" == "true" ]; then
          echo "Terraform operations encountered errors"
          exit 1
        fi

    - name: Check for State File Changes
      id: check_state_changes
      needs: apply
      shell: bash
      run: |
        git fetch origin main
        if git diff origin/main -- terraform/terraform.tfstate domains.txt | grep .; then
          echo "changes=true" >> $GITHUB_ENV
        else
          echo "changes=false" >> $GITHUB_ENV
        fi

    - name: Commit and push changes
      id: commit
      needs: check_state_changes
      shell: bash
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"
        git add terraform/terraform.tfstate terraform/.terraform.lock.hcl terraform/.terraform/ domains.txt
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Save Terraform state, lock file and domain list"
          git push https://${{ inputs.GH_PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}.git main
        fi