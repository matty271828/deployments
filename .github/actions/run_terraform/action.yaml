name: 'Run Terraform'
description: 'Runs Terraform configuration'

inputs:
  domains:
    description: 'JSON string containing the list of domains and their frontend repos'
    required: true
  cloudflare_account_id:
    description: 'Cloudflare Account ID'
    required: true
  cloudflare_api_token:
    description: 'Cloudflare API Token'
    required: true
  GH_PERSONAL_ACCESS_TOKEN:
    description: 'GitHub Personal Access Token'
    required: true

outputs:
  terraform_error:
    description: 'Indicates if there was an error in Terraform operations'
    value: ${{ steps.apply.outputs.terraform_error }}
  auth_db_id:
    description: 'The ID of the AUTH_DB D1 database'
    value: ${{ steps.apply.outputs.auth_db_id }}

runs:
  using: "composite"
  steps:
    - name: Fetch Terraform Files
      shell: bash
      run: |
        git fetch origin main
        git checkout origin/main -- terraform/ || true

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.7.0"

    - name: Terraform Init
      id: init
      working-directory: ./terraform
      shell: bash
      run: |
        terraform init -upgrade 

    - name: Terraform Plan
      id: plan
      working-directory: ./terraform
      shell: bash
      run: |
        set +e
        timeout 900 terraform plan -out=tfplan
        exit_code=$?
        if [ $exit_code -eq 124 ]; then
          echo "::error::Terraform plan timed out after 15 minutes"
          echo "terraform_error=true" >> $GITHUB_OUTPUT
          exit 1
        elif [ $exit_code -ne 0 ]; then
          echo "terraform_error=true" >> $GITHUB_OUTPUT
        else
          echo "terraform_error=false" >> $GITHUB_OUTPUT
        fi
        exit $exit_code
      env:
        TF_VAR_cloudflare_account_id: ${{ inputs.cloudflare_account_id }}
        TF_VAR_cloudflare_api_token: ${{ inputs.cloudflare_api_token }}
        TF_VAR_domains_json: ${{ inputs.domains }}
        TF_LOG: DEBUG

    - name: Terraform Apply
      id: apply
      shell: bash
      working-directory: ./terraform
      run: |
        set +e
        timeout 900 terraform apply -auto-approve
        exit_code=$?
        if [ $exit_code -eq 124 ]; then
          echo "::error::Terraform apply timed out after 15 minutes"
          echo "terraform_error=true" >> $GITHUB_OUTPUT
          exit 1
        elif [ $exit_code -ne 0 ]; then
          echo "terraform_error=true" >> $GITHUB_OUTPUT
        else
          echo "terraform_error=false" >> $GITHUB_OUTPUT
          auth_db_id=$(terraform output -raw auth_db_id)
          echo "Debug: Terraform output auth_db_id = $auth_db_id"
          echo "auth_db_id=$auth_db_id" >> $GITHUB_OUTPUT
        fi
        # Don't exit on error, just continue
      env:
        TF_VAR_cloudflare_account_id: ${{ inputs.cloudflare_account_id }}
        TF_VAR_cloudflare_api_token: ${{ inputs.cloudflare_api_token }}
        TF_VAR_domains_json: ${{ inputs.domains }}
        TF_LOG: DEBUG

    - name: Save Terraform State to R2
      id: save_state
      shell: bash
      working-directory: ./terraform
      run: |
        # Check if bucket exists and create it if it doesn't
        BUCKET_CHECK=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets/terraform-state" \
          -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
          -H "Content-Type: application/json")
        
        if ! echo "$BUCKET_CHECK" | jq -e '.success == true' > /dev/null; then
          echo "Creating terraform-state bucket..."
          curl -X POST "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets" \
            -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
            -H "Content-Type: application/json" \
            -d '{"name": "terraform-state"}'
        fi
        
        # Save the state file
        curl -X PUT "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets/terraform-state/objects/terraform.tfstate" \
          -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
          -H "Content-Type: application/json" \
          --data-binary @terraform.tfstate
        
        # Save the state lock file if it exists
        if [ -f "terraform.tfstate.lock.info" ]; then
          curl -X PUT "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets/terraform-state/objects/terraform.tfstate.lock.info" \
            -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
            -H "Content-Type: application/json" \
            --data-binary @terraform.tfstate.lock.info
        fi

    - name: Check for Terraform Errors
      id: check_errors
      shell: bash
      run: |
        if [ "${{ steps.apply.outputs.terraform_error }}" == "true" ]; then
          echo "Terraform operations encountered errors"
          echo "::warning::Terraform operations encountered errors, but continuing to commit state changes"
        fi

    - name: Check for State File Changes
      id: check_state_changes
      shell: bash
      run: |
        git fetch origin main
        if git diff origin/main | grep .; then
          echo "changes=true" >> $GITHUB_ENV
        else
          echo "changes=false" >> $GITHUB_ENV
        fi

    - name: Commit and push changes
      id: commit
      shell: bash
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"
        
        # Stash any local changes
        git stash
        
        # Get latest changes
        git fetch origin main
        git checkout main
        
        # Apply our changes on top of latest
        git stash pop || true
        
        # Add all changes
        git add .
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          # Try to commit and push normally first
          if git commit -m "Update Terraform state and lock files" && git pull --rebase origin main; then
            git push https://${{ inputs.GH_PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}.git main
          else
            echo "::error::Failed to commit and push changes. Please check the repository state."
            exit 1
          fi
        fi

    - name: Final Terraform Error Check
      shell: bash
      run: |
        if [ "${{ steps.apply.outputs.terraform_error }}" == "true" ]; then
          echo "::error::Terraform operations encountered errors"
          exit 1
        fi