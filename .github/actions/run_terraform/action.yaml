name: 'Run Terraform'
description: 'Runs Terraform configuration'

inputs:
  domains:
    description: 'JSON string containing the list of domains and their frontend repos'
    required: true
  cloudflare_account_id:
    description: 'Cloudflare Account ID'
    required: true
  cloudflare_api_token:
    description: 'Cloudflare API Token'
    required: true
  aws_access_key_id:
    description: 'AWS Access Key ID'
    required: true
  aws_secret_access_key:
    description: 'AWS Secret Access Key'
    required: true
  gmail_address:
    description: 'Gmail address to forward emails to'
    required: true

outputs:
  terraform_error:
    description: 'Indicates if there was an error in Terraform operations'
    value: ${{ steps.apply.outputs.terraform_error }}
  auth_db_id:
    description: 'The ID of the AUTH_DB D1 database'
    value: ${{ steps.apply.outputs.auth_db_id }}
  domain_worker_names:
    description: 'The names of the domain workers for worker-to-worker bindings'
    value: ${{ steps.apply.outputs.domain_worker_names }}
  domain_database_ids:
    description: 'The IDs of the domain D1 databases'
    value: ${{ steps.apply.outputs.domain_database_ids }}

runs:
  using: "composite"
  steps:
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.7.0"

    - name: Create R2 bucket if it doesn't exist
      shell: bash
      run: |
        # Check if bucket exists
        BUCKET_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets/terraform-state" \
          -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
          -H "Content-Type: application/json")
        
        if ! echo "$BUCKET_RESPONSE" | jq -e '.success == true' > /dev/null; then
          # Create bucket if it doesn't exist
          CREATE_RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets" \
            -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
            -H "Content-Type: application/json" \
            -d '{"name": "terraform-state"}')
          
          if ! echo "$CREATE_RESPONSE" | jq -e '.success == true' > /dev/null; then
            echo "Error: Failed to create R2 bucket"
            echo "$CREATE_RESPONSE" | jq -r '.errors[0].message'
            exit 1
          fi
        fi

    - name: Get State from R2
      id: get-state
      shell: bash
      run: |
        # Try to get the state file
        STATE_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets/terraform-state/objects/terraform.tfstate" \
          -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
          -H "Content-Type: application/json")
        
        # Check if we got a valid response and if the file exists
        if echo "$STATE_RESPONSE" | jq -e '.success == false and .errors[0].code == 10007' > /dev/null; then
          echo "No existing state file found - this is expected on first run"
          echo "state_exists=false" >> $GITHUB_OUTPUT
        elif echo "$STATE_RESPONSE" | jq empty 2>/dev/null; then
          # State file exists, save it directly
          echo "$STATE_RESPONSE" > terraform/terraform.tfstate
          
          # Verify the state file has the required version field
          if ! jq -e '.version' terraform/terraform.tfstate > /dev/null; then
            echo "::error::Invalid state file format - missing version field"
            echo "state_exists=false" >> $GITHUB_OUTPUT
            rm terraform/terraform.tfstate
            exit 1
          else
            echo "state_exists=true" >> $GITHUB_OUTPUT
          fi
        else
          echo "::error::Unexpected error from R2"
          echo "$STATE_RESPONSE"
          exit 1
        fi

    - name: Terraform Init
      id: init
      working-directory: ./terraform
      shell: bash
      run: |
        terraform init -upgrade 

    - name: Terraform Plan
      id: plan
      working-directory: ./terraform
      shell: bash
      run: |
        # Create a custom output formatter
        cat > mask_uuids.sh << 'EOF'
        #!/bin/bash
        # Replace UUIDs with placeholders
        sed -E 's/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/[UUID]/g' | \
        sed -E 's/[0-9a-f]{32}/[HASH]/g'
        EOF
        chmod +x mask_uuids.sh

        # Run terraform plan and capture the full output
        timeout 900 terraform plan -out=tfplan 2>&1 | tee plan_output.log
        exit_code=$?
        
        if [ $exit_code -eq 124 ]; then
          echo "::error::Terraform plan timed out after 15 minutes"
          echo "terraform_error=true" >> $GITHUB_OUTPUT
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT
          exit 1
        elif [ $exit_code -ne 0 ]; then
          echo "::error::Terraform plan failed with exit code $exit_code"
          echo "::error::Full error output:"
          cat plan_output.log
          echo "terraform_error=true" >> $GITHUB_OUTPUT
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT
          exit $exit_code
        else
          echo "terraform_error=false" >> $GITHUB_OUTPUT
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT
        fi
      env:
        TF_VAR_cloudflare_account_id: ${{ inputs.cloudflare_account_id }}
        TF_VAR_cloudflare_api_token: ${{ inputs.cloudflare_api_token }}
        TF_VAR_domains_json: ${{ inputs.domains }}
        TF_VAR_aws_access_key_id: ${{ inputs.aws_access_key_id }}
        TF_VAR_aws_secret_access_key: ${{ inputs.aws_secret_access_key }}
        TF_VAR_gmail_address: ${{ inputs.gmail_address }}
        TF_IN_AUTOMATION: "true"

    - name: Terraform Apply
      id: apply
      shell: bash
      working-directory: ./terraform
      run: |
        # Run terraform apply and capture the full output
        timeout 900 terraform apply -auto-approve tfplan 2>&1 | tee apply_output.log
        exit_code=$?
        
        if [ $exit_code -eq 124 ]; then
          echo "::error::Terraform apply timed out after 15 minutes"
          echo "terraform_error=true" >> $GITHUB_OUTPUT
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT
          exit 1
        elif [ $exit_code -ne 0 ]; then
          echo "::error::Terraform apply failed with exit code $exit_code"
          echo "::error::Full error output:"
          cat apply_output.log
          echo "terraform_error=true" >> $GITHUB_OUTPUT
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT
          exit $exit_code
        else
          echo "terraform_error=false" >> $GITHUB_OUTPUT
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT
          auth_db_id=$(terraform output -raw auth_db_id)
          echo "auth_db_id=$auth_db_id" >> $GITHUB_OUTPUT
          domain_worker_names=$(terraform output -json domain_worker_names)
          echo "domain_worker_names=$domain_worker_names" >> $GITHUB_OUTPUT
          domain_database_ids=$(terraform output -json domain_database_ids)
          echo "domain_database_ids=$domain_database_ids" >> $GITHUB_OUTPUT
        fi
      env:
        TF_VAR_cloudflare_account_id: ${{ inputs.cloudflare_account_id }}
        TF_VAR_cloudflare_api_token: ${{ inputs.cloudflare_api_token }}
        TF_VAR_domains_json: ${{ inputs.domains }}
        TF_VAR_aws_access_key_id: ${{ inputs.aws_access_key_id }}
        TF_VAR_aws_secret_access_key: ${{ inputs.aws_secret_access_key }}
        TF_VAR_gmail_address: ${{ inputs.gmail_address }}
        TF_IN_AUTOMATION: "true"

    - name: Save State to R2
      id: save-state
      shell: bash
      working-directory: ./terraform
      run: |
        # Save the state file
        curl -X PUT "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets/terraform-state/objects/terraform.tfstate" \
          -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
          -H "Content-Type: application/json" \
          --data-binary @terraform.tfstate
        
        # Save the state lock file if it exists
        if [ -f "terraform.tfstate.lock.info" ]; then
          curl -X PUT "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets/terraform-state/objects/terraform.tfstate.lock.info" \
            -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
            -H "Content-Type: application/json" \
            --data-binary @terraform.tfstate.lock.info
        fi

    - name: Debug Step Status
      shell: bash
      run: |
        echo "Plan step error status: ${{ steps.plan.outputs.terraform_error }}"
        echo "Apply step error status: ${{ steps.apply.outputs.terraform_error }}"
        echo "Plan step exit code: ${{ steps.plan.outputs.exit_code }}"
        echo "Apply step exit code: ${{ steps.apply.outputs.exit_code }}"

    - name: Final Terraform Error Check
      shell: bash
      run: |
        if [ "${{ steps.apply.outputs.terraform_error }}" == "true" ]; then
          echo "::error::Terraform apply encountered errors"
          echo "::error::Check the apply step output above for details"
          exit 1
        fi
        
        if [ "${{ steps.plan.outputs.terraform_error }}" == "true" ]; then
          echo "::error::Terraform plan encountered errors"
          echo "::error::Check the plan step output above for details"
          exit 1
        fi
        
        echo "âœ… Terraform operations completed successfully"