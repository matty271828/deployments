name: 'Run Terraform'
description: 'Runs Terraform configuration'

inputs:
  domains:
    description: 'JSON string containing the list of domains and their frontend repos'
    required: true
  cloudflare_account_id:
    description: 'Cloudflare Account ID'
    required: true
  cloudflare_api_token:
    description: 'Cloudflare API Token'
    required: true
  GH_PERSONAL_ACCESS_TOKEN:
    description: 'GitHub Personal Access Token'
    required: true

outputs:
  terraform_error:
    description: 'Indicates if there was an error in Terraform operations'
    value: ${{ steps.apply.outputs.terraform_error }}
  auth_db_id:
    description: 'The ID of the AUTH_DB D1 database'
    value: ${{ steps.apply.outputs.auth_db_id }}

runs:
  using: "composite"
  steps:
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.7.0"

    - name: Get State from R2
      id: get-state
      shell: bash
      run: |
        # Try to get the state file
        STATE_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets/terraform-state/objects/terraform.tfstate" \
          -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
          -H "Content-Type: application/json")
        
        echo "Debug: Raw R2 Response:"
        echo "$STATE_RESPONSE"
        
        # Check if we got a valid response
        if ! echo "$STATE_RESPONSE" | jq empty 2>/dev/null; then
          echo "No existing state file found - this is expected on first run"
          echo "state_exists=false" >> $GITHUB_OUTPUT
        else
          # State file exists, save it
          # The state file is stored in the 'result' field of the response
          echo "$STATE_RESPONSE" | jq -r '.result' > terraform/terraform.tfstate
          
          echo "Debug: Extracted state file content:"
          cat terraform/terraform.tfstate
          
          # Verify the state file has the required version field
          if ! jq -e '.version' terraform/terraform.tfstate > /dev/null; then
            echo "::error::Invalid state file format - missing version field"
            echo "state_exists=false" >> $GITHUB_OUTPUT
            rm terraform/terraform.tfstate
            exit 1
          else
            echo "state_exists=true" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Terraform Init
      id: init
      working-directory: ./terraform
      shell: bash
      run: |
        terraform init -upgrade 

    - name: Terraform Plan
      id: plan
      working-directory: ./terraform
      shell: bash
      run: |
        set +e
        timeout 900 terraform plan -out=tfplan
        exit_code=$?
        if [ $exit_code -eq 124 ]; then
          echo "::error::Terraform plan timed out after 15 minutes"
          echo "terraform_error=true" >> $GITHUB_OUTPUT
          exit 1
        elif [ $exit_code -ne 0 ]; then
          echo "terraform_error=true" >> $GITHUB_OUTPUT
        else
          echo "terraform_error=false" >> $GITHUB_OUTPUT
        fi
        exit $exit_code
      env:
        TF_VAR_cloudflare_account_id: ${{ inputs.cloudflare_account_id }}
        TF_VAR_cloudflare_api_token: ${{ inputs.cloudflare_api_token }}
        TF_VAR_domains_json: ${{ inputs.domains }}
        TF_LOG: DEBUG

    - name: Terraform Apply
      id: apply
      shell: bash
      working-directory: ./terraform
      run: |
        set +e
        timeout 900 terraform apply -auto-approve
        exit_code=$?
        if [ $exit_code -eq 124 ]; then
          echo "::error::Terraform apply timed out after 15 minutes"
          echo "terraform_error=true" >> $GITHUB_OUTPUT
          exit 1
        elif [ $exit_code -ne 0 ]; then
          echo "terraform_error=true" >> $GITHUB_OUTPUT
        else
          echo "terraform_error=false" >> $GITHUB_OUTPUT
          auth_db_id=$(terraform output -raw auth_db_id)
          echo "Debug: Terraform output auth_db_id = $auth_db_id"
          echo "auth_db_id=$auth_db_id" >> $GITHUB_OUTPUT
        fi
        # Don't exit on error, just continue
      env:
        TF_VAR_cloudflare_account_id: ${{ inputs.cloudflare_account_id }}
        TF_VAR_cloudflare_api_token: ${{ inputs.cloudflare_api_token }}
        TF_VAR_domains_json: ${{ inputs.domains }}
        TF_LOG: DEBUG

    - name: Save State to R2
      id: save-state
      shell: bash
      working-directory: ./terraform
      run: |
        # Save the state file
        curl -X PUT "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets/terraform-state/objects/terraform.tfstate" \
          -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
          -H "Content-Type: application/json" \
          --data-binary @terraform.tfstate
        
        # Save the state lock file if it exists
        if [ -f "terraform.tfstate.lock.info" ]; then
          curl -X PUT "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets/terraform-state/objects/terraform.tfstate.lock.info" \
            -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
            -H "Content-Type: application/json" \
            --data-binary @terraform.tfstate.lock.info
        fi

    - name: Final Terraform Error Check
      shell: bash
      run: |
        if [ "${{ steps.apply.outputs.terraform_error }}" == "true" ]; then
          echo "::error::Terraform operations encountered errors"
          exit 1
        fi