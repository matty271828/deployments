name: 'Setup Frontend'
description: 'Sets up the frontend repository for Cloudflare Pages deployment'

inputs:
  frontend_repo:
    description: 'Frontend Repository URL (e.g., https://github.com/username/repo)'
    required: true
  GH_PERSONAL_ACCESS_TOKEN:
    description: 'GitHub Personal Access Token'
    required: true
  CLOUDFLARE_API_TOKEN:
    description: 'Cloudflare API Token'
    required: true
  CLOUDFLARE_ACCOUNT_ID:
    description: 'Cloudflare Account ID'
    required: true

runs:
  using: "composite"
  steps:
    - name: Extract repository name
      id: extract_repo
      shell: bash
      run: |
        # Remove https://github.com/ from the URL
        REPO_PATH="${GITHUB_REPOSITORY#https://github.com/}"
        # Split into owner and repo
        OWNER="${REPO_PATH%%/*}"
        REPO="${REPO_PATH#*/}"
        echo "owner=$OWNER" >> $GITHUB_OUTPUT
        echo "repo_name=$REPO" >> $GITHUB_OUTPUT

    - name: Check if project exists
      id: check_project
      shell: bash
      run: |
        response=$(curl -s -X GET \
          "https://api.cloudflare.com/client/v4/accounts/${{ inputs.CLOUDFLARE_ACCOUNT_ID }}/pages/projects/${{ steps.extract_repo.outputs.repo_name }}" \
          -H "Authorization: Bearer ${{ inputs.CLOUDFLARE_API_TOKEN }}" \
          -H "Content-Type: application/json")
        
        if [[ $(echo $response | jq -r '.success') == "true" ]]; then
          echo "project_exists=true" >> $GITHUB_OUTPUT
        else
          echo "project_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Create project if it doesn't exist
      if: steps.check_project.outputs.project_exists == 'false'
      shell: bash
      run: |
        curl -s -X POST \
          "https://api.cloudflare.com/client/v4/accounts/${{ inputs.CLOUDFLARE_ACCOUNT_ID }}/pages/projects" \
          -H "Authorization: Bearer ${{ inputs.CLOUDFLARE_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "name": "${{ steps.extract_repo.outputs.repo_name }}",
            "production_branch": "main",
            "build_config": {
              "build_command": "npm run build -- --mode production",
              "build_output_dir": "dist",
              "node_version": "20"
            }
          }'

    - name: Deploy to Cloudflare Pages
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ inputs.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ inputs.CLOUDFLARE_ACCOUNT_ID }}
        projectName: ${{ steps.extract_repo.outputs.repo_name }}
        directory: dist
        gitHubToken: ${{ inputs.GH_PERSONAL_ACCESS_TOKEN }}
        branch: main