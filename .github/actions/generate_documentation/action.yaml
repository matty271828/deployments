name: 'Generate Documentation'
description: 'Generates GraphQL API documentation from database schemas and pushes to frontend repositories'

inputs:
  domain_worker_names:
    description: 'JSON string of domain worker names for documentation generation'
    required: true
  domain_database_ids:
    description: 'JSON string of domain database IDs for reference'
    required: true
  GH_PERSONAL_ACCESS_TOKEN:
    description: 'GitHub Personal Access Token'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies for domain-worker template
      working-directory: './domain-worker'
      shell: bash
      run: 'npm install'

    - name: Parse Domain Configuration
      shell: bash
      run: |
        # Parse the domain worker names and database IDs JSON
        DOMAIN_WORKERS='${{ inputs.domain_worker_names }}'
        DOMAIN_DATABASES='${{ inputs.domain_database_ids }}'
        
        # Store the parsed data for use in subsequent steps
        echo "domain_workers=$DOMAIN_WORKERS" >> $GITHUB_OUTPUT
        echo "domain_databases=$DOMAIN_DATABASES" >> $GITHUB_OUTPUT
        
        # Display what we're working with
        echo "Domain workers for documentation generation:"
        echo "$DOMAIN_WORKERS" | jq -r 'to_entries[] | .value'
        echo ""
        echo "Database mappings:"
        echo "$DOMAIN_DATABASES" | jq -r 'to_entries[] | "\(.key): \(.value.database_id)"'

    - name: Fetch Schema Files
      shell: bash
      run: |
        # Parse the domain worker names JSON
        DOMAIN_WORKERS='${{ steps.parse-config.outputs.domain_workers }}'
        
        # Create a JSON object to store schema temp directories
        SCHEMA_TEMP_DIRS='{}'
        
        # Loop through each domain worker and fetch the schema file
        echo "$DOMAIN_WORKERS" | jq -r 'to_entries[] | .value' | while read -r worker_name; do
          echo "Fetching schema for: $worker_name"
          
          # Extract repo name from worker name
          repo_name=$(echo "$worker_name" | sed 's/-worker$//')
          
          # Create temp directory for schema file
          schema_temp_dir=$(mktemp -d)
          
          # Add to our JSON object
          SCHEMA_TEMP_DIRS=$(echo "$SCHEMA_TEMP_DIRS" | jq --arg worker "$worker_name" --arg dir "$schema_temp_dir" '. + {($worker): $dir}')
          
          # Fetch just the schema.sql file using GitHub API
          cd "$schema_temp_dir"
          
          # Get the schema file content from the repo
          SCHEMA_CONTENT=$(curl -s -H "Authorization: token ${{ inputs.GH_PERSONAL_ACCESS_TOKEN }}" \
            "https://api.github.com/repos/matty271828/$repo_name/contents/schema.sql" | \
            jq -r '.content // empty' | base64 -d)
          
          if [ -n "$SCHEMA_CONTENT" ]; then
            echo "$SCHEMA_CONTENT" > schema.sql
            echo "Schema file fetched for $repo_name"
          else
            echo "No schema.sql found in $repo_name"
            # Create empty file to avoid errors
            touch schema.sql
          fi
        done
        
        # Store the schema temp directories as a single output
        echo "schema_temp_dirs=$SCHEMA_TEMP_DIRS" >> $GITHUB_OUTPUT

    - name: Generate Documentation
      shell: bash
      run: |
        # Parse the domain worker names JSON
        DOMAIN_WORKERS='${{ steps.parse-config.outputs.domain_workers }}'
        SCHEMA_TEMP_DIRS='${{ steps.fetch-schema.outputs.schema_temp_dirs }}'
        
        # Loop through each domain worker and generate documentation
        echo "$DOMAIN_WORKERS" | jq -r 'to_entries[] | .value' | while read -r worker_name; do
          echo "Generating documentation for: $worker_name"
          
          # Get the schema temp directory
          schema_temp_dir=$(echo "$SCHEMA_TEMP_DIRS" | jq -r --arg worker "$worker_name" '.[$worker]')
          
          # Extract repo name from worker name
          repo_name=$(echo "$worker_name" | sed 's/-worker$//')
          
          # Check if schema.sql exists
          if [ -f "$schema_temp_dir/schema.sql" ]; then
            echo "Found schema.sql in $repo_name, generating documentation..."
            
            # Create a temporary directory for documentation generation
            docs_temp_dir=$(mktemp -d)
            
            # Copy the domain-worker template to get the generator
            cp -r domain-worker/* "$docs_temp_dir/"
            
            # Install dependencies
            cd "$docs_temp_dir"
            npm install
            
            # Copy the documentation generation script from domain-worker package
            cp src/generate-docs.js .
            
            # Run the documentation generation script
            node generate-docs.js
            
            # Clean up the documentation script
            rm generate-docs.js
            
            echo "Documentation generated for $repo_name"
          else
            echo "No schema.sql found in $repo_name, skipping documentation generation"
          fi
        done

    - name: Push Documentation to Repositories
      shell: bash
      run: |
        # Parse the domain worker names JSON
        DOMAIN_WORKERS='${{ steps.parse-config.outputs.domain_workers }}'
        SCHEMA_TEMP_DIRS='${{ steps.fetch-schema.outputs.schema_temp_dirs }}'
        
        # Loop through each domain worker and push documentation
        echo "$DOMAIN_WORKERS" | jq -r 'to_entries[] | .value' | while read -r worker_name; do
          echo "Pushing documentation for: $worker_name"
          
          # Get the temp directories
          schema_temp_dir=$(echo "$SCHEMA_TEMP_DIRS" | jq -r --arg worker "$worker_name" '.[$worker]')
          docs_temp_dir="${{ steps.generate-docs.outputs.docs_temp_dir_${worker_name} }}"
          
          # Extract repo name from worker name
          repo_name=$(echo "$worker_name" | sed 's/-worker$//')
          
          # Check if documentation was generated
          if [ -n "$docs_temp_dir" ] && [ -f "$docs_temp_dir/API_DOCUMENTATION.md" ]; then
            echo "Pushing documentation to $repo_name repo..."
            
            # Read the generated documentation
            DOCS_CONTENT=$(cat "$docs_temp_dir/API_DOCUMENTATION.md")
            
            # Check if documentation already exists in the repo
            EXISTING_DOCS=$(curl -s -H "Authorization: token ${{ inputs.GH_PERSONAL_ACCESS_TOKEN }}" \
              "https://api.github.com/repos/matty271828/$repo_name/contents/API_DOCUMENTATION.md" | \
              jq -r '.sha // empty')
            
            if [ -n "$EXISTING_DOCS" ]; then
              echo "Existing API_DOCUMENTATION.md found, checking for changes..."
              
              # Get existing content to compare
              EXISTING_CONTENT=$(curl -s -H "Authorization: token ${{ inputs.GH_PERSONAL_ACCESS_TOKEN }}" \
                "https://api.github.com/repos/matty271828/$repo_name/contents/API_DOCUMENTATION.md" | \
                jq -r '.content // empty' | base64 -d)
              
              if [ "$DOCS_CONTENT" = "$EXISTING_CONTENT" ]; then
                echo "No changes detected in documentation, skipping update"
              else
                echo "Changes detected in documentation, updating..."
                
                # Update the file using GitHub API
                curl -X PUT \
                  -H "Authorization: token ${{ inputs.GH_PERSONAL_ACCESS_TOKEN }}" \
                  -H "Content-Type: application/json" \
                  -d "{
                    \"message\": \"Auto-generated GraphQL API documentation\",
                    \"content\": \"$(echo "$DOCS_CONTENT" | base64 -w 0)\",
                    \"sha\": \"$EXISTING_DOCS\"
                  }" \
                  "https://api.github.com/repos/matty271828/$repo_name/contents/API_DOCUMENTATION.md"
                
                echo "Documentation updated for $repo_name"
              fi
            else
              echo "No existing API_DOCUMENTATION.md found, creating new documentation..."
              
              # Create the file using GitHub API
              curl -X PUT \
                -H "Authorization: token ${{ inputs.GH_PERSONAL_ACCESS_TOKEN }}" \
                -H "Content-Type: application/json" \
                -d "{
                  \"message\": \"Auto-generated GraphQL API documentation\",
                  \"content\": \"$(echo "$DOCS_CONTENT" | base64 -w 0)\"
                }" \
                "https://api.github.com/repos/matty271828/$repo_name/contents/API_DOCUMENTATION.md"
              
              echo "Documentation created for $repo_name"
            fi
            
            echo "Documentation process completed for $repo_name"
          else
            echo "No documentation generated for $repo_name, skipping push"
          fi
        done

    - name: Cleanup Temporary Files
      shell: bash
      run: |
        # Parse the domain worker names JSON
        DOMAIN_WORKERS='${{ steps.parse-config.outputs.domain_workers }}'
        SCHEMA_TEMP_DIRS='${{ steps.fetch-schema.outputs.schema_temp_dirs }}'
        
        # Loop through each domain worker and cleanup
        echo "$DOMAIN_WORKERS" | jq -r 'to_entries[] | .value' | while read -r worker_name; do
          echo "Cleaning up temporary files for: $worker_name"
          
          # Get the temp directories
          schema_temp_dir=$(echo "$SCHEMA_TEMP_DIRS" | jq -r --arg worker "$worker_name" '.[$worker]')
          docs_temp_dir="${{ steps.generate-docs.outputs.docs_temp_dir_${worker_name} }}"
          
          # Clean up temp directories
          if [ -n "$schema_temp_dir" ] && [ -d "$schema_temp_dir" ]; then
            rm -rf "$schema_temp_dir"
          fi
          
          if [ -n "$docs_temp_dir" ] && [ -d "$docs_temp_dir" ]; then
            rm -rf "$docs_temp_dir"
          fi
          
          echo "Cleanup completed for $worker_name"
        done 