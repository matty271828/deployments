name: 'Destroy Terraform'
description: 'Destroys all Terraform resources'

inputs:
  cloudflare_account_id:
    description: 'Cloudflare Account ID'
    required: true
  cloudflare_api_token:
    description: 'Cloudflare API Token'
    required: true
  GH_PERSONAL_ACCESS_TOKEN:
    description: 'GitHub Personal Access Token'
    required: true

runs:
  using: "composite"
  steps:
    - name: Fetch Terraform Files
      shell: bash
      run: |
        git fetch origin main
        git checkout origin/main -- terraform/ || true

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.7.0"

    - name: Terraform Init
      id: init
      working-directory: ./terraform
      shell: bash
      run: |
        terraform init -upgrade 

    - name: Terraform Destroy
      id: destroy
      shell: bash
      working-directory: ./terraform
      run: |
        set +e
        timeout 900 terraform destroy -auto-approve
        exit_code=$?
        if [ $exit_code -eq 124 ]; then
          echo "::error::Terraform destroy timed out after 15 minutes"
          exit 1
        elif [ $exit_code -ne 0 ]; then
          exit 1
        fi
        exit $exit_code
      env:
        TF_VAR_cloudflare_account_id: ${{ inputs.cloudflare_account_id }}
        TF_VAR_cloudflare_api_token: ${{ inputs.cloudflare_api_token }}
        TF_VAR_domains_json: '{"domains":[]}'
        TF_LOG: DEBUG

    - name: Commit and push changes
      id: commit
      shell: bash
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"
        git add .
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Clean up Terraform state after destroy"
          git push https://${{ inputs.GH_PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}.git main
        fi 