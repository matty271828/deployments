name: 'Add to Domains'
description: 'Adds a new domain and its frontend repo to the domains.json file'

inputs:
  domain:
    description: 'Domain Name'
    required: true
  frontend_repo:
    description: 'Frontend Repository URL (e.g., https://github.com/username/repo)'
    required: true
  cloudflare_account_id:
    description: 'Cloudflare Account ID'
    required: true
  cloudflare_api_token:
    description: 'Cloudflare API Token'
    required: true

outputs:
  domains:
    description: 'JSON array of all domains and their frontend repos'
    value: ${{ steps.get-domains.outputs.domains }}

runs:
  using: "composite"
  steps:
    - name: Install jq
      shell: bash
      run: |
        if ! command -v jq &> /dev/null; then
          sudo apt-get update
          sudo apt-get install -y jq
        fi

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Validate domain format
      shell: bash
      run: |
        if ! [[ "${{ inputs.domain }}" =~ ^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\.[a-zA-Z]{2,}$ ]]; then
          echo "Error: Invalid domain format"
          exit 1
        fi
        if ! [[ "${{ inputs.frontend_repo }}" =~ ^https://github.com/[a-zA-Z0-9-]+/[a-zA-Z0-9-]+$ ]]; then
          echo "Error: Invalid GitHub repository URL format"
          exit 1
        fi

    - name: Enable R2 if not enabled
      shell: bash
      run: |
        # Check if R2 is enabled by attempting to list buckets
        R2_STATUS=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets" \
          -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
          -H "Content-Type: application/json")
        
        if ! echo "$R2_STATUS" | jq -e '.success == true' > /dev/null; then
          ERROR_CODE=$(echo "$R2_STATUS" | jq -r '.errors[0].code // "unknown"')
          ERROR_MESSAGE=$(echo "$R2_STATUS" | jq -r '.errors[0].message // "Unknown error"')
          
          if [[ "$ERROR_CODE" == "10001" ]]; then
            echo "::error::R2 is not enabled for your account"
            echo ""
            echo "Please enable R2 through the Cloudflare Dashboard:"
            echo "1. Go to Cloudflare Dashboard â†’ R2"
            echo "2. Click 'Enable R2'"
            echo "3. Follow the prompts to add payment information"
            echo "4. Once enabled, you can use R2 for storing domain mappings"
            echo ""
            echo "Note: R2 requires payment information to be set up, even for the free tier."
            echo "This is a one-time setup requirement from Cloudflare."
          else
            echo "::error::Failed to access R2: $ERROR_MESSAGE"
            echo ""
            echo "This could be because:"
            echo "1. Your API token doesn't have R2 permissions"
            echo "2. R2 is not properly enabled"
            echo "3. There's an issue with your Cloudflare account"
            echo ""
            echo "Please check your API token permissions and ensure R2 is enabled."
          fi
          exit 1
        fi

    - name: Create R2 bucket if it doesn't exist
      shell: bash
      run: |
        # Check if bucket exists
        BUCKET_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets/domain-mappings" \
          -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
          -H "Content-Type: application/json")
        
        if ! echo "$BUCKET_RESPONSE" | jq -e '.success == true' > /dev/null; then
          # Create bucket if it doesn't exist
          CREATE_RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets" \
            -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
            -H "Content-Type: application/json" \
            -d '{"name": "domain-mappings"}')
          
          if ! echo "$CREATE_RESPONSE" | jq -e '.success == true' > /dev/null; then
            echo "Error: Failed to create R2 bucket"
            echo "$CREATE_RESPONSE" | jq -r '.errors[0].message'
            exit 1
          fi
        fi

    - name: Get current mappings
      id: get-current
      shell: bash
      run: |
        # Try to get current mappings
        MAPPINGS_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets/domain-mappings/objects/mappings.json" \
          -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
          -H "Content-Type: application/json")
        
        # Check if we got a valid response and if the file exists
        if echo "$MAPPINGS_RESPONSE" | jq -e '.success == false and .errors[0].code == 10007' > /dev/null; then
          # File doesn't exist, start with empty array
          echo "No existing mappings file found, starting fresh"
          MAPPINGS='[]'
        elif echo "$MAPPINGS_RESPONSE" | jq empty 2>/dev/null; then
          # File exists and is valid JSON
          MAPPINGS="$MAPPINGS_RESPONSE"
        else
          echo "::error::Invalid response from R2"
          echo "$MAPPINGS_RESPONSE"
          exit 1
        fi
        
        # Store the mappings as a single line JSON string
        echo "current_mappings=$(echo "$MAPPINGS" | jq -c '.')" >> $GITHUB_OUTPUT

    - name: Add new domain mapping
      shell: bash
      run: |
        # Create new entry
        NEW_ENTRY=$(jq -n --arg domain "${{ inputs.domain }}" --arg repo "${{ inputs.frontend_repo }}" '{domain: $domain, frontend_repo: $repo}')
        
        # Parse the current mappings from the output
        CURRENT_MAPPINGS=$(echo '${{ steps.get-current.outputs.current_mappings }}' | jq -r '.')
        
        # Check if domain exists and update or add accordingly
        if echo "$CURRENT_MAPPINGS" | jq -e --arg domain "${{ inputs.domain }}" '.[] | select(.domain == $domain)' > /dev/null; then
          echo "Domain ${{ inputs.domain }} exists, updating frontend repo..."
          # Update existing mapping
          UPDATED_MAPPINGS=$(echo "$CURRENT_MAPPINGS" | jq --arg domain "${{ inputs.domain }}" --arg repo "${{ inputs.frontend_repo }}" 'map(if .domain == $domain then {domain: $domain, frontend_repo: $repo} else . end)')
        else
          echo "Adding new domain mapping..."
          # Add new mapping
          UPDATED_MAPPINGS=$(echo "$CURRENT_MAPPINGS" | jq --argjson new "$NEW_ENTRY" '. + [$new]')
        fi
        
        # Upload updated mappings
        UPLOAD_RESPONSE=$(curl -s -X PUT "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets/domain-mappings/objects/mappings.json" \
          -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
          -H "Content-Type: application/json" \
          -d "$UPDATED_MAPPINGS")
        
        if ! echo "$UPLOAD_RESPONSE" | jq empty 2>/dev/null; then
          echo "Error: Failed to upload updated mappings"
          echo "$UPLOAD_RESPONSE"
          exit 1
        fi