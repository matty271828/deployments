name: 'Setup Domains'
description: 'Manages the list of domains and their frontend repos by appending new ones to domains.txt'

inputs:
  domain:
    description: 'Domain Name'
    required: true
  frontend_repo:
    description: 'Frontend Repository URL (e.g., https://github.com/username/repo)'
    required: true

outputs:
  domains:
    description: 'List of all domains and their frontend repos'
    value: ${{ steps.get-domains.outputs.domains }}

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create domains.txt if it doesn't exist
      shell: bash
      run: |
        if [ ! -f domains.txt ]; then
          echo "# Format: domain|frontend_repo" > domains.txt
          echo "# Example: example.com|https://github.com/username/example-frontend" >> domains.txt
          echo "# Each domain should be on a new line" >> domains.txt
          echo "# Lines starting with # are comments" >> domains.txt
        fi

    - name: Check if domain exists
      id: check-domain
      shell: bash
      run: |
        if grep -Fxq "${{ inputs.domain }}|${{ inputs.frontend_repo }}" domains.txt; then
          echo "domain_exists=true" >> $GITHUB_OUTPUT
        else
          echo "domain_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Append domain if new
      if: steps.check-domain.outputs.domain_exists == 'false'
      shell: bash
      run: |
        echo "${{ inputs.domain }}|${{ inputs.frontend_repo }}" >> domains.txt

    - name: Get all domains
      id: get-domains
      shell: bash
      run: |
        # Read domains.txt, filter out comments and empty lines, and join with newlines
        DOMAINS=$(grep -v '^#' domains.txt | grep -v '^$' | tr '\n' ' ')
        echo "domains=$DOMAINS" >> $GITHUB_OUTPUT 