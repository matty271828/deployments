name: 'Setup Stripe'
description: 'Creates Stripe products and prices for payments'

inputs:
  stripe_secret_key:
    description: 'Stripe secret key'
    required: true
  cloudflare_account_id:
    description: 'Cloudflare Account ID'
    required: true
  cloudflare_api_token:
    description: 'Cloudflare API token'
    required: true
    
runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Stripe
      shell: bash
      run: 'npm install stripe'

    - name: Get domains from R2
      id: get-domains
      shell: bash
      run: |
        echo "Retrieving domains from R2..."
        
        # Get domain mappings from R2
        MAPPINGS_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets/domain-mappings/objects/mappings.json" \
          -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
          -H "Content-Type: application/json")
        
        echo "Raw response from R2:"
        echo "$MAPPINGS_RESPONSE"
        
        # Check if we got a valid response
        if ! echo "$MAPPINGS_RESPONSE" | jq empty 2>/dev/null; then
          echo "::error::Failed to retrieve domain mappings from R2 - invalid JSON"
          echo "$MAPPINGS_RESPONSE"
          exit 1
        fi
        
        # Check if response is an array (success case) or has errors
        if echo "$MAPPINGS_RESPONSE" | jq -e 'type == "array"' > /dev/null; then
          # Response is an array, which is what we expect
          echo "‚úÖ Successfully retrieved domain mappings from R2"
        elif echo "$MAPPINGS_RESPONSE" | jq -e '.errors' > /dev/null; then
          # Response has errors
          echo "::error::Failed to get domain mappings"
          echo "$MAPPINGS_RESPONSE" | jq -r '.errors[0].message'
          exit 1
        else
          echo "::error::Unexpected response format from R2"
          echo "$MAPPINGS_RESPONSE"
          exit 1
        fi
        
        # Store the domains as a single line JSON string
        echo "domains=$(echo "$MAPPINGS_RESPONSE" | jq -c '.')" >> $GITHUB_OUTPUT
        echo "Retrieved $(echo "$MAPPINGS_RESPONSE" | jq '. | length') domains from R2"
        
        # Also write to a temporary file for the Node.js script
        echo "$MAPPINGS_RESPONSE" > /tmp/domains.json
        echo "Wrote domains to /tmp/domains.json"

    - name: Setup Stripe Products
      shell: bash
      run: |
        node -e "
        const Stripe = require('stripe');
        const fs = require('fs');
        const stripe = new Stripe('${{ inputs.stripe_secret_key }}', {
          apiVersion: '2023-10-16'
        });
        
        async function setupProducts() {
          try {
            console.log('üîß Setting up Stripe products and prices for all domains...');
            
            // Read domains from the temporary file
            const domainsData = fs.readFileSync('/tmp/domains.json', 'utf8');
            const domainList = JSON.parse(domainsData);
            
            console.log('üìã Processing', domainList.length, 'domains...');
            
            const results = [];
            
            // Process each domain
            for (const domainObj of domainList) {
              const domain = domainObj.domain;
              console.log('\\nüåê Processing domain:', domain);
              
              // 1. Get or create domain-specific product
              const productName = \`Premium Plan - \${domain}\`;
              console.log('üì¶ Checking domain-specific product:', productName);
              let products = await stripe.products.list({ limit: 100, active: true });
              let product = products.data.find(p => p.name === productName);
              
              // Generate a business name based on the domain
              const businessName = domain.replace(/^www\./, '').split('.')[0];
              const displayBusinessName = businessName.charAt(0).toUpperCase() + businessName.slice(1);
              
              if (!product) {
                product = await stripe.products.create({
                  name: productName,
                  description: \`Premium subscription with enhanced features for \${domain}\`,
                  active: true,
                  metadata: {
                    domain: domain,
                    business_name: displayBusinessName,
                    statement_descriptor: displayBusinessName
                  }
                });
                console.log('‚úÖ Created domain-specific product:', product.id, 'with business name:', displayBusinessName);
              } else {
                console.log('‚úÖ Using existing domain-specific product:', product.id, 'with business name:', displayBusinessName);
              }
              
              // 2. Get or create domain-specific price
              console.log('üí∞ Checking domain-specific price...');
              let prices = await stripe.prices.list({ 
                product: product.id, 
                active: true,
                type: 'recurring'
              });
              let price = prices.data.find(p => p.currency === 'gbp' && p.recurring?.interval === 'month');
              
              if (!price) {
                price = await stripe.prices.create({
                  product: product.id,
                  unit_amount: 999, // ¬£9.99 in pence
                  currency: 'gbp',
                  recurring: { interval: 'month' },
                  active: true,
                  metadata: {
                    domain: domain,
                    business_name: displayBusinessName
                  }
                });
                console.log('‚úÖ Created domain-specific price:', price.id, 'with business name:', displayBusinessName);
              } else {
                console.log('‚úÖ Using existing domain-specific price:', price.id, 'with business name:', displayBusinessName);
              }
              
              // Store results for this domain
              results.push({
                domain: domain,
                product_id: product.id,
                price_id: price.id
              });
              
              console.log('‚úÖ Completed setup for', domain);
            }
            
            // 3. Output configuration summary
            console.log('\\nüìã Stripe Configuration Summary:');
            results.forEach(result => {
              console.log(\`\${result.domain}: Product \${result.product_id}, Price \${result.price_id}\`);
            });
            
            // 4. Set outputs (using the first domain's price ID for backward compatibility)
            if (results.length > 0) {
              console.log('\\n::set-output name=product_id::' + results[0].product_id);
              console.log('::set-output name=price_id::' + results[0].price_id);
              console.log('::set-output name=all_results::' + JSON.stringify(results));
            }
            
            console.log('\\n‚úÖ Stripe products setup complete for all domains!');
            
          } catch (error) {
            console.error('‚ùå Stripe setup failed:', error.message);
            process.exit(1);
          }
        }
        
        setupProducts();
        " 