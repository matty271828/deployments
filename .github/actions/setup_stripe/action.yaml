name: 'Setup Stripe'
description: 'Creates Stripe products, prices, and webhooks for payments'

inputs:
  stripe_secret_key:
    description: 'Stripe secret key'
    required: true
  cloudflare_account_id:
    description: 'Cloudflare Account ID'
    required: true
  cloudflare_api_token:
    description: 'Cloudflare API token'
    required: true
  GH_PERSONAL_ACCESS_TOKEN:
    description: 'GitHub Personal Access Token'
    required: true
    
runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Stripe
      shell: bash
      run: 'npm install stripe'

    - name: Setup GitHub Secret
      shell: bash
      run: |
        # Get GitHub's public key for encrypting secrets
        echo "🔑 Getting GitHub public key..."
        PUBLIC_KEY_RESPONSE=$(curl -s \
          -H "Authorization: Bearer ${{ inputs.GH_PERSONAL_ACCESS_TOKEN }}" \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/repos/${{ github.repository }}/actions/secrets/public-key")
        
        PUBLIC_KEY=$(echo "$PUBLIC_KEY_RESPONSE" | jq -r '.key')
        KEY_ID=$(echo "$PUBLIC_KEY_RESPONSE" | jq -r '.key_id')
        
        if [ "$PUBLIC_KEY" = "null" ] || [ -z "$PUBLIC_KEY" ]; then
          echo "❌ Failed to get GitHub public key"
          echo "$PUBLIC_KEY_RESPONSE"
          exit 1
        fi
        
        echo "✅ Got GitHub public key (ID: $KEY_ID)"
        
        # The webhook secret will be set by the Node.js script
        # We'll encrypt it there and store it as a GitHub secret

    - name: Get domains from R2
      id: get-domains
      shell: bash
      run: |
        echo "Retrieving domains from R2..."
        
        # Get domain mappings from R2
        MAPPINGS_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets/domain-mappings/objects/mappings.json" \
          -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
          -H "Content-Type: application/json")
        
        echo "Raw response from R2:"
        echo "$MAPPINGS_RESPONSE"
        
        # Check if we got a valid response
        if ! echo "$MAPPINGS_RESPONSE" | jq empty 2>/dev/null; then
          echo "::error::Failed to retrieve domain mappings from R2 - invalid JSON"
          echo "$MAPPINGS_RESPONSE"
          exit 1
        fi
        
        # Check if response is an array (success case) or has errors
        if echo "$MAPPINGS_RESPONSE" | jq -e 'type == "array"' > /dev/null; then
          # Response is an array, which is what we expect
          echo "✅ Successfully retrieved domain mappings from R2"
        elif echo "$MAPPINGS_RESPONSE" | jq -e '.errors' > /dev/null; then
          # Response has errors
          echo "::error::Failed to get domain mappings"
          echo "$MAPPINGS_RESPONSE" | jq -r '.errors[0].message'
          exit 1
        else
          echo "::error::Unexpected response format from R2"
          echo "$MAPPINGS_RESPONSE"
          exit 1
        fi
        
        # Store the domains as a single line JSON string
        echo "domains=$(echo "$MAPPINGS_RESPONSE" | jq -c '.')" >> $GITHUB_OUTPUT
        echo "Retrieved $(echo "$MAPPINGS_RESPONSE" | jq '. | length') domains from R2"
        
        # Also write to a temporary file for the Node.js script
        echo "$MAPPINGS_RESPONSE" > /tmp/domains.json
        echo "Wrote domains to /tmp/domains.json"

    - name: Setup Stripe Products and Webhooks
      shell: bash
      run: |
        # First, get the webhook secret from Stripe using Node.js
        echo "🔧 Setting up Stripe products, prices, and webhooks..."
        
        WEBHOOK_SECRET=$(node -e "
        const Stripe = require('stripe');
        const fs = require('fs');
        const stripe = new Stripe('${{ inputs.stripe_secret_key }}', {
          apiVersion: '2023-10-16'
        });
        
        async function setupStripe() {
          try {
            // Read domains from the temporary file
            const domainsData = fs.readFileSync('/tmp/domains.json', 'utf8');
            const domainList = JSON.parse(domainsData);
            
            console.log('Processing', domainList.length, 'domains...');
            
            const results = [];
            
            // Process each domain
            for (const domainObj of domainList) {
              const domain = domainObj.domain;
              console.log('Processing domain:', domain);
              
              // 1. Get or create domain-specific product
              const productName = 'Standard Membership - ' + domain;
              let products = await stripe.products.list({ limit: 100, active: true });
              let product = products.data.find(p => p.name === productName);
              
              // Generate a business name based on the domain
              const businessName = domain.replace(/^www\./, '').split('.')[0];
              const displayBusinessName = businessName.charAt(0).toUpperCase() + businessName.slice(1);
              
              if (!product) {
                product = await stripe.products.create({
                  name: productName,
                  description: 'Standard membership for ' + domain,
                  active: true,
                  metadata: {
                    domain: domain,
                    business_name: displayBusinessName,
                    statement_descriptor: displayBusinessName
                  }
                });
                console.log('Created domain-specific product:', product.id);
              } else {
                console.log('Using existing domain-specific product:', product.id);
              }
              
              // 2. Get or create domain-specific price
              let prices = await stripe.prices.list({ 
                product: product.id, 
                active: true,
                type: 'recurring'
              });
              let price = prices.data.find(p => p.currency === 'gbp' && p.recurring?.interval === 'month');
              
              if (!price) {
                price = await stripe.prices.create({
                  product: product.id,
                  unit_amount: 1299, // £12.99 in pence
                  currency: 'gbp',
                  recurring: { interval: 'month' },
                  active: true,
                  metadata: {
                    domain: domain,
                    business_name: displayBusinessName
                  }
                });
                console.log('Created domain-specific price:', price.id);
              } else {
                console.log('Using existing domain-specific price:', price.id);
              }
              
              // Store results for this domain
              results.push({
                domain: domain,
                product_id: product.id,
                price_id: price.id
              });
            }
            
            // 3. Setup webhook for auth service
            const authServiceDomain = domainList[0]?.domain || 'auth.example.com';
            const webhookUrl = 'https://' + authServiceDomain + '/auth/webhook';
            
            // Check if webhook already exists
            const existingWebhooks = await stripe.webhookEndpoints.list({ limit: 100 });
            let webhook = existingWebhooks.data.find(w => w.url === webhookUrl);
            
            const requiredEvents = [
              'checkout.session.completed',
              'customer.subscription.created',
              'customer.subscription.updated',
              'customer.subscription.deleted',
              'invoice.payment_succeeded',
              'invoice.payment_failed'
            ];
            
            if (webhook) {
              console.log('Using existing webhook:', webhook.id);
              
              // Check if webhook has all required events
              const currentEvents = webhook.enabled_events;
              const missingEvents = requiredEvents.filter(event => !currentEvents.includes(event));
              
              if (missingEvents.length > 0) {
                console.log('Updating webhook with missing events...');
                webhook = await stripe.webhookEndpoints.update(webhook.id, {
                  enabled_events: requiredEvents
                });
              }
            } else {
              console.log('Creating new webhook...');
              webhook = await stripe.webhookEndpoints.create({
                url: webhookUrl,
                enabled_events: requiredEvents,
                description: 'Auth Service Webhook'
              });
            }
            
            // Set outputs
            if (results.length > 0) {
              console.log('product_id=' + results[0].product_id + ' >> $GITHUB_OUTPUT');
              console.log('price_id=' + results[0].price_id + ' >> $GITHUB_OUTPUT');
              console.log('all_results=' + JSON.stringify(results) + ' >> $GITHUB_OUTPUT');
            }
            
            console.log('webhook_id=' + webhook.id + ' >> $GITHUB_OUTPUT');
            console.log('webhook_secret=' + webhook.secret + ' >> $GITHUB_OUTPUT');
            
            // Return the webhook secret for bash to use
            console.log('WEBHOOK_SECRET=' + webhook.secret);
            
            // Update domain mappings
            const currentMappings = JSON.parse(fs.readFileSync('/tmp/domains.json', 'utf8'));
            const updatedMappings = currentMappings.map(domainObj => {
              const result = results.find(r => r.domain === domainObj.domain);
              if (result) {
                return {
                  ...domainObj,
                  stripe_price_id: result.price_id,
                  stripe_product_id: result.product_id,
                  stripe_webhook_id: webhook.id
                };
              }
              return domainObj;
            });
            
            // Upload updated mappings to R2
            const uploadResponse = await fetch('https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets/domain-mappings/objects/mappings.json', {
              method: 'PUT',
              headers: {
                'Authorization': 'Bearer ${{ inputs.cloudflare_api_token }}',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(updatedMappings)
            });
            
            if (!uploadResponse.ok) {
              console.error('Failed to update domain mappings');
              process.exit(1);
            }
            
            console.log('Successfully updated domain mappings with Stripe configuration');
            
          } catch (error) {
            console.error('Stripe setup failed:', error.message);
            process.exit(1);
          }
        }
        
        setupStripe();
        ")
        
        # Extract the webhook secret from the Node.js output
        WEBHOOK_SECRET=$(echo "$WEBHOOK_SECRET" | grep "WEBHOOK_SECRET=" | cut -d'=' -f2)
        
        if [ -z "$WEBHOOK_SECRET" ]; then
          echo "❌ Failed to get webhook secret from Stripe"
          exit 1
        fi
        
        echo "✅ Got webhook secret from Stripe"
        
        # Now store the webhook secret as a GitHub repository secret using bash
        echo "🔐 Storing webhook secret as GitHub repository secret..."
        
        # Get GitHub public key
        PUBLIC_KEY_RESPONSE=$(curl -s \
          -H "Authorization: Bearer ${{ inputs.GH_PERSONAL_ACCESS_TOKEN }}" \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/repos/${{ github.repository }}/actions/secrets/public-key")
        
        PUBLIC_KEY=$(echo "$PUBLIC_KEY_RESPONSE" | jq -r '.key')
        KEY_ID=$(echo "$PUBLIC_KEY_RESPONSE" | jq -r '.key_id')
        
        if [ "$PUBLIC_KEY" = "null" ] || [ -z "$PUBLIC_KEY" ]; then
          echo "❌ Failed to get GitHub public key"
          echo "$PUBLIC_KEY_RESPONSE"
          exit 1
        fi
        
        echo "✅ Got GitHub public key (ID: $KEY_ID)"
        
        # Install libsodium-wrappers for proper GitHub secret encryption
        echo "📦 Installing libsodium-wrappers..."
        npm install libsodium-wrappers
        
        # Encrypt the webhook secret using libsodium (GitHub's required method)
        echo "🔧 Encrypting webhook secret with libsodium..."
        ENCRYPTED_SECRET=$(node -e "
        const sodium = require('libsodium-wrappers');
        
        const secret = '$WEBHOOK_SECRET';
        const key = '$PUBLIC_KEY';
        
        sodium.ready.then(() => {
          try {
            // Convert the secret and key to Uint8Array
            let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL);
            let binsec = sodium.from_string(secret);
            
            // Encrypt the secret using libsodium crypto_box_seal
            let encBytes = sodium.crypto_box_seal(binsec, binkey);
            
            // Convert the encrypted Uint8Array to Base64
            let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL);
            
            console.log(output);
          } catch (error) {
            console.error('Libsodium encryption failed:', error.message);
            process.exit(1);
          }
        }).catch(error => {
          console.error('Libsodium initialization failed:', error.message);
          process.exit(1);
        });
        ")
        
        if [ -z "$ENCRYPTED_SECRET" ]; then
          echo "❌ Failed to encrypt webhook secret with libsodium"
          exit 1
        fi
        
        echo "✅ Successfully encrypted webhook secret with libsodium"
        
        # Store the encrypted secret
        SECRET_PAYLOAD="{\"encrypted_value\":\"$ENCRYPTED_SECRET\",\"key_id\":\"$KEY_ID\"}"
        
        echo "🔐 Sending request to GitHub API..."
        SECRET_RESPONSE=$(curl -s -w "\n%{http_code}" -X PUT \
          -H "Authorization: Bearer ${{ inputs.GH_PERSONAL_ACCESS_TOKEN }}" \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          -H "Content-Type: application/json" \
          -d "$SECRET_PAYLOAD" \
          "https://api.github.com/repos/${{ github.repository }}/actions/secrets/STRIPE_WEBHOOK_SECRET")
        
        # Extract HTTP status code (last line) and response body
        HTTP_STATUS=$(echo "$SECRET_RESPONSE" | tail -n1)
        RESPONSE_BODY=$(echo "$SECRET_RESPONSE" | head -n -1)
        
        echo "📊 GitHub API Response Status: $HTTP_STATUS"
        if [ -n "$RESPONSE_BODY" ]; then
          echo "📊 GitHub API Response Body: $RESPONSE_BODY"
        fi
        
        # Check HTTP status code
        if [ "$HTTP_STATUS" = "204" ]; then
          echo "✅ Webhook secret stored as GitHub repository secret"
        elif [ "$HTTP_STATUS" = "201" ]; then
          echo "✅ Webhook secret created as GitHub repository secret"
        else
          echo "❌ Failed to store webhook secret (HTTP $HTTP_STATUS)"
          if [ -n "$RESPONSE_BODY" ]; then
            echo "Error details: $RESPONSE_BODY"
          fi
          exit 1
        fi
        
        echo "✅ Stripe setup complete for all domains!" 