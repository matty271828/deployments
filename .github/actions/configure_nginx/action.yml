name: 'Configure Nginx'
description: 'Configures Nginx for the deployment'

inputs:
  droplet_ip:
    description: 'Digital Ocean Droplet IP'
    required: true
  digital_ocean_ssh_private_key:
    description: 'SSH private key for DigitalOcean'
    required: true
  GH_PERSONAL_ACCESS_TOKEN:
    description: 'GitHub Personal Access Token'
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ inputs.digital_ocean_ssh_private_key }}

    - name: Configure Nginx
      shell: bash
      run: |
        DROPLET_IP="${{ inputs.droplet_ip }}"
        echo "Configuring Nginx..."
        
        # Install Nginx if not installed
        ssh -o StrictHostKeyChecking=no root@$DROPLET_IP "if ! command -v nginx &> /dev/null; then sudo apt update && sudo apt install -y nginx; fi"
        
        # Read domains from domains.txt
        DOMAINS=$(cat domains.txt)
        
        # Generate domain blocks
        DOMAIN_BLOCKS=""
        echo "Starting domain block generation..."
        echo "Domains from domains.txt:"
        cat domains.txt
        
        for domain in $DOMAINS; do
          if [ -n "$domain" ]; then
            echo "Processing domain: $domain"
            # Create domain-specific configuration
            DOMAIN_BLOCK=$(sed "s/{{domain}}/$domain/g" nginx/domain.conf.template)
            echo "Generated block for $domain:"
            echo "$DOMAIN_BLOCK"
            DOMAIN_BLOCKS="${DOMAIN_BLOCKS}${DOMAIN_BLOCK}"
          fi
        done
        
        echo "Final DOMAIN_BLOCKS content:"
        echo "$DOMAIN_BLOCKS"
        
        # Generate final Nginx configuration
        echo "Attempting to generate nginx.conf..."
        sed "s|{{domain_blocks}}|$(echo "$DOMAIN_BLOCKS" | sed 's/[\&/]/\\&/g')|" nginx/nginx.conf.template > nginx/nginx.conf
        
        echo "Generated nginx.conf content:"
        cat nginx/nginx.conf
        
        # Upload the configuration
        scp -o StrictHostKeyChecking=no nginx/nginx.conf root@$DROPLET_IP:/etc/nginx/nginx.conf
        
        # Test the configuration
        ssh -o StrictHostKeyChecking=no root@$DROPLET_IP "nginx -t"
        
        # Restart Nginx completely to apply changes
        echo 'Restarting Nginx to apply the changes'
        ssh -o StrictHostKeyChecking=no root@$DROPLET_IP "systemctl restart nginx"

    - name: Commit and push changes
      id: commit
      shell: bash
      run: |
        # Create a directory for the generated configs if it doesn't exist
        mkdir -p generated/nginx
        
        # Copy the generated config to the generated directory
        cp nginx/nginx.conf generated/nginx/
        
        # Debug: Show contents of generated config
        echo "Generated Nginx config:"
        cat generated/nginx/nginx.conf
        
        # Configure git
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"
        
        # Add and commit changes
        git add generated/nginx/
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update generated Nginx configuration [skip ci]"
          git push "https://${{ inputs.GH_PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}.git" main 