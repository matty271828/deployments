name: 'Configure Nginx'
description: 'Configures Nginx for the deployment'

inputs:
  droplet_ip:
    description: 'Digital Ocean Droplet IP'
    required: true
  digital_ocean_ssh_private_key:
    description: 'SSH private key for DigitalOcean'
    required: true
  GH_PERSONAL_ACCESS_TOKEN:
    description: 'GitHub Personal Access Token'
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ inputs.digital_ocean_ssh_private_key }}

    - name: Configure Nginx
      shell: bash
      run: |
        DROPLET_IP="${{ inputs.droplet_ip }}"
        NEWLINE=$'\n'
        echo "Configuring Nginx..."
        
        # Install Nginx if not installed
        ssh -o StrictHostKeyChecking=no root@$DROPLET_IP "if ! command -v nginx &> /dev/null; then sudo apt update && sudo apt install -y nginx; fi"
        
        # Read domains from domains.txt
        DOMAINS=$(cat domains.txt)
        
        # Generate domain blocks
        DOMAIN_BLOCKS=""
        echo "Starting domain block generation..."
        echo "Domains from domains.txt:"
        cat domains.txt
        
        for domain in $DOMAINS; do
          if [ -n "$domain" ]; then
            echo "Processing domain: $domain"
            # Create domain-specific configuration
            DOMAIN_BLOCK=$(sed "s/{{domain}}/$domain/g" nginx/domain.conf.template)
            echo "Generated block for $domain:"
            echo "$DOMAIN_BLOCK"
            # Add newline before each block except the first one
            if [ -n "$DOMAIN_BLOCKS" ]; then
              DOMAIN_BLOCKS="${DOMAIN_BLOCKS}${NEWLINE}${NEWLINE}"
            fi
            DOMAIN_BLOCKS="${DOMAIN_BLOCKS}${DOMAIN_BLOCK}"
          fi
        done
        
        echo "Final DOMAIN_BLOCKS content:"
        echo "$DOMAIN_BLOCKS"
        
        # Generate final Nginx configuration
        echo "Generating nginx.conf..."
        
        # Create the nginx.conf by concatenating the template parts
        sed -n '/^user/,/{{domain_blocks}}/p' nginx/nginx.conf.template | sed '$d' > nginx/nginx.conf.generated
        echo "$DOMAIN_BLOCKS" >> nginx/nginx.conf.generated
        sed -n '/{{domain_blocks}}/,$p' nginx/nginx.conf.template | sed '1d' >> nginx/nginx.conf.generated
        
        echo "Final nginx.conf:"
        cat nginx/nginx.conf.generated
        
        # Upload the configuration
        echo "Uploading configuration to server..."
        scp -o StrictHostKeyChecking=no nginx/nginx.conf.generated root@$DROPLET_IP:/etc/nginx/nginx.conf
        
        # Test the configuration on the server
        echo "Testing Nginx configuration on server..."
        if ! ssh -o StrictHostKeyChecking=no root@$DROPLET_IP "nginx -t"; then
          echo "❌ Nginx configuration test failed on server"
          exit 1
        fi
        
        # Restart Nginx completely to apply changes
        echo 'Restarting Nginx to apply the changes'
        if ! ssh -o StrictHostKeyChecking=no root@$DROPLET_IP "systemctl restart nginx"; then
          echo "❌ Failed to restart Nginx service"
          exit 1
        fi
        
        echo "✅ Nginx configuration successfully updated and service restarted"

    - name: Commit and push changes
      id: commit
      shell: bash
      run: |
        # Configure git
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"
        
        # Add and commit changes
        git add nginx/nginx.conf.generated
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update generated Nginx configuration [skip ci]"
          git push "https://${{ inputs.GH_PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}.git" main 