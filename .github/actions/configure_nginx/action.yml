name: 'Configure Nginx'
description: 'Configures Nginx for the deployment'

inputs:
  droplet_ip:
    description: 'Digital Ocean Droplet IP'
    required: true
  digital_ocean_ssh_private_key:
    description: 'SSH private key for DigitalOcean'
    required: true
  GH_PERSONAL_ACCESS_TOKEN:
    description: 'GitHub Personal Access Token'
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ inputs.digital_ocean_ssh_private_key }}

    - name: Configure Nginx
      shell: bash
      run: |
        DROPLET_IP="${{ inputs.droplet_ip }}"
        echo "Configuring Nginx..."
        
        # Install Nginx if not installed
        ssh -o StrictHostKeyChecking=no root@$DROPLET_IP "if ! command -v nginx &> /dev/null; then sudo apt update && sudo apt install -y nginx; fi"
        
        # Create necessary directories
        ssh -o StrictHostKeyChecking=no root@$DROPLET_IP "mkdir -p /etc/nginx/sites-available /etc/nginx/sites-enabled"
        
        # Read domains from domains.txt
        DOMAINS=$(cat domains.txt)
        
        # Reset Nginx configuration by removing all enabled sites
        ssh -o StrictHostKeyChecking=no root@$DROPLET_IP "find /etc/nginx/sites-enabled/ -type l -delete"
        
        # Create and enable configuration for each domain
        for domain in $DOMAINS; do
          if [ -n "$domain" ]; then
            # Create domain-specific configuration
            sed "s/{{domain}}/$domain/g" nginx/domain.conf.template > nginx/$domain.conf
            
            # Upload the configuration
            scp -o StrictHostKeyChecking=no nginx/$domain.conf root@$DROPLET_IP:/etc/nginx/sites-available/$domain
            
            # Create symbolic link to enable the site
            ssh -o StrictHostKeyChecking=no root@$DROPLET_IP "ln -sf /etc/nginx/sites-available/$domain /etc/nginx/sites-enabled/"
          fi
        done
        
        # Test the configuration
        ssh -o StrictHostKeyChecking=no root@$DROPLET_IP "nginx -t"
        
        # Restart Nginx completely to apply changes
        echo 'Restarting Nginx to apply the changes'
        ssh -o StrictHostKeyChecking=no root@$DROPLET_IP "systemctl restart nginx"

    - name: Commit and push changes
      id: commit
      shell: bash
      run: |
        # Create a directory for the generated configs if it doesn't exist
        mkdir -p generated/nginx
        
        # Copy all generated configs to the generated directory
        cp nginx/*.conf generated/nginx/
        
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"
        git add generated/nginx/
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update generated Nginx configurations [skip ci]"
          git push "https://${{ inputs.GH_PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}.git" main 