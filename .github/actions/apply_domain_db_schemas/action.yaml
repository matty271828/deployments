name: 'Apply Domain DB Schemas'
description: 'Applies the domain db schemas for all domains'

inputs:
  cloudflare_account_id:
    description: 'Cloudflare Account ID'
    required: true
  cloudflare_api_token:
    description: 'Cloudflare API token'
    required: true
  domain_database_ids:
    description: 'JSON string of domain database IDs'
    required: true
  GH_PERSONAL_ACCESS_TOKEN:
    description: 'GitHub Personal Access Token'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install jq
      shell: bash
      run: |
        if ! command -v jq &> /dev/null; then
          sudo apt-get update
          sudo apt-get install -y jq
        fi

    - name: Get domain mappings from R2
      id: get-mappings
      shell: bash
      run: |
        # Get current mappings from R2
        MAPPINGS_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets/domain-mappings/objects/mappings.json" \
          -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
          -H "Content-Type: application/json")
        
        # Check if we got a valid response
        if ! echo "$MAPPINGS_RESPONSE" | jq empty 2>/dev/null; then
          echo "::error::Failed to retrieve domain mappings from R2"
          echo "$MAPPINGS_RESPONSE"
          exit 1
        fi
        
        # Store the mappings
        echo "mappings=$(echo "$MAPPINGS_RESPONSE" | jq -c '.')" >> $GITHUB_OUTPUT

    - name: Process schema for each domain
      shell: bash
      run: |
        # Parse the mappings and database IDs
        MAPPINGS='${{ steps.get-mappings.outputs.mappings }}'
        DATABASE_IDS='${{ inputs.domain_database_ids }}'
        
        # Process each domain
        echo "$MAPPINGS" | jq -c '.[]' | while read -r mapping; do
          DOMAIN=$(echo "$mapping" | jq -r '.domain')
          FRONTEND_REPO=$(echo "$mapping" | jq -r '.frontend_repo')
          
          # Extract repo name from GitHub URL (part after last slash)
          REPO_NAME=$(echo "$FRONTEND_REPO" | sed 's|.*/||')
          
          echo "Processing domain: $DOMAIN (repo: $REPO_NAME)"
          echo "Full repo URL: $FRONTEND_REPO"
          
          # Get the corresponding database info from terraform output
          DB_INFO=$(echo "$DATABASE_IDS" | jq -r --arg repo "$REPO_NAME" '.[$repo]')
          
          if [ "$DB_INFO" = "null" ] || [ -z "$DB_INFO" ]; then
            echo "::warning::Database info not found for repo $REPO_NAME, skipping..."
            continue
          fi
          
          # Extract database ID from the info
          DB_ID=$(echo "$DB_INFO" | jq -r '.database_id')
          
          if [ -z "$DB_ID" ] || [ "$DB_ID" = "null" ]; then
            echo "::warning::Database ID not found for $REPO_NAME, skipping..."
            continue
          fi
          
          echo "Found database ID: $DB_ID for $REPO_NAME (domain: $DOMAIN)"
          
          # Create temporary directory for this repo
          TEMP_DIR=$(mktemp -d)
          cd "$TEMP_DIR"
          
          # Clone the frontend repo
          echo "Cloning $FRONTEND_REPO..."
          git clone "https://x-access-token:${{ inputs.GH_PERSONAL_ACCESS_TOKEN }}@github.com/matty271828/$REPO_NAME.git" .
          
          # Check if schema.sql exists
          if [ ! -f "schema.sql" ]; then
            echo "No schema.sql found in $REPO_NAME, skipping..."
            cd - > /dev/null
            rm -rf "$TEMP_DIR"
            continue
          fi
          
          echo "Found schema.sql in $REPO_NAME:"
          cat schema.sql
          
          # Apply schema to database using Cloudflare API
          echo "Applying schema to database $DB_ID..."
          
          # Read the schema file and escape it for JSON
          SCHEMA_SQL=$(cat schema.sql | jq -Rs .)
          
          # Execute the SQL via Cloudflare API
          API_RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/d1/database/$DB_ID/query" \
            -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
            -H "Content-Type: application/json" \
            -d "{\"sql\": $SCHEMA_SQL}")
          
          # Check if the API call was successful
          if echo "$API_RESPONSE" | jq -e '.success == true' > /dev/null; then
            echo "Schema applied successfully for $REPO_NAME"
          else
            echo "::error::Failed to apply schema for $REPO_NAME"
            echo "$API_RESPONSE" | jq -r '.errors[0].message // "Unknown error"'
            cd - > /dev/null
            rm -rf "$TEMP_DIR"
            exit 1
          fi
          
          # Clean up
          cd - > /dev/null
          rm -rf "$TEMP_DIR"
        done