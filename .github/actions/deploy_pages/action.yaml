name: 'Deploy Pages'
description: 'Deploys all Cloudflare Pages projects'

inputs:
  cloudflare_account_id:
    description: 'Cloudflare Account ID'
    required: true
  cloudflare_api_token:
    description: 'Cloudflare API token'
    required: true
  cloudflare_email:
    description: 'Cloudflare email'
    required: true

runs:
  using: "composite"
  steps:
    - name: Install jq
      shell: bash
      run: |
        if ! command -v jq &> /dev/null; then
          sudo apt-get update
          sudo apt-get install -y jq
        fi

    - name: Get Domain Mappings from R2
      id: get-mappings
      shell: bash
      run: |
        # Get domain mappings from R2
        MAPPINGS_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets/domain-mappings/objects/mappings.json" \
          -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
          -H "Content-Type: application/json")
        
        # Check if we got a valid response
        if ! echo "$MAPPINGS_RESPONSE" | jq empty 2>/dev/null; then
          echo "::error::Invalid JSON response from R2"
          echo "$MAPPINGS_RESPONSE"
          exit 1
        fi

        MAPPINGS="$MAPPINGS_RESPONSE"
        echo "mappings=$MAPPINGS" >> $GITHUB_OUTPUT

    - name: Create Deployments
      shell: bash
      run: |
        # Extract project names from mappings
        PROJECTS=$(echo "${{ steps.get-mappings.outputs.mappings }}" | jq -r '.[].frontend_repo | split("/") | last')
        
        # Deploy each project
        for project in $PROJECTS; do
          echo "Contacting ... https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/pages/projects/$project/deployments"
          response=$(curl -s https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/pages/projects/$project/deployments \
            -H 'Content-Type: multipart/form-data' \
            -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
            -F branch=main)
          
          # Check if the request was successful
          if ! echo "$response" | jq -e '.success == true' > /dev/null; then
            echo "::error::Failed to deploy project $project"
            echo "$response" | jq -r '.errors[0].message'
            exit 1
          fi
        done

    - name: Configure Custom Domains
      shell: bash
      run: |
        # Extract project names and domains from mappings
        MAPPINGS='${{ steps.get-mappings.outputs.mappings }}'
        PROJECTS=$(echo "$MAPPINGS" | jq -r '.[].frontend_repo | split("/") | last')
        DOMAINS=$(echo "$MAPPINGS" | jq -r '.[].domain')
        
        # Convert to arrays
        readarray -t project_array <<< "$PROJECTS"
        readarray -t domain_array <<< "$DOMAINS"
        
        # Configure custom domain for each project
        for i in "${!project_array[@]}"; do
          project="${project_array[$i]}"
          domain="${domain_array[$i]}"
          echo "Contacting ... https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/pages/projects/$project/domains"
          response=$(curl -s https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/pages/projects/$project/domains \
            -H 'Content-Type: application/json' \
            -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
            -d "{\"name\": \"$domain\"}")
          
          # Check if the request was successful or if domain is already configured
          if ! echo "$response" | jq -e '.success == true' > /dev/null; then
            error_message=$(echo "$response" | jq -r '.errors[0].message')
            if [[ "$error_message" == *"already added this custom domain"* ]]; then
              echo "Domain $domain is already configured for project $project"
            else
              echo "::error::Failed to configure domain $domain for project $project"
              echo "$error_message"
              exit 1
            fi
          fi
        done