name: 'Deploy Pages'
description: 'Deploys all Cloudflare Pages projects'

inputs:
  cloudflare_account_id:
    description: 'Cloudflare Account ID'
    required: true
  cloudflare_api_token:
    description: 'Cloudflare API token'
    required: true
  cloudflare_email:
    description: 'Cloudflare email'
    required: true

runs:
  using: "composite"
  steps:
    - name: Install jq
      shell: bash
      run: |
        if ! command -v jq &> /dev/null; then
          sudo apt-get update
          sudo apt-get install -y jq
        fi

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Wrangler
      shell: bash
      run: npm install -g wrangler

    - name: Get Domain Mappings from R2
      id: get-mappings
      shell: bash
      run: |
        # Get domain mappings from R2
        MAPPINGS_RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/r2/buckets/domain-mappings/objects/mappings.json" \
          -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
          -H "Content-Type: application/json")
        
        # Check if we got a valid response and if the file exists
        if echo "$MAPPINGS_RESPONSE" | jq -e '.success == false and .errors[0].code == 10007' > /dev/null; then
          # File doesn't exist, start with empty array
          echo "No existing mappings file found, starting fresh"
          MAPPINGS='[]'
        elif echo "$MAPPINGS_RESPONSE" | jq empty 2>/dev/null; then
          # File exists and is valid JSON
          MAPPINGS="$MAPPINGS_RESPONSE"
        else
          echo "::error::Invalid response from R2"
          echo "$MAPPINGS_RESPONSE"
          exit 1
        fi
        
        # Store the mappings as a single line JSON string
        echo "mappings=$(echo "$MAPPINGS" | jq -c '.')" >> $GITHUB_OUTPUT

    - name: Deploy Projects with Environment Variables
      shell: bash
      run: |
        # Extract project names and domains from mappings
        MAPPINGS='${{ steps.get-mappings.outputs.mappings }}'
        if [ "$MAPPINGS" = "[]" ]; then
          echo "No domain mappings found, skipping deployments"
          exit 0
        fi
        
        # Create a map of project names to their domains and price IDs
        PROJECT_DOMAIN_MAP=$(echo "$MAPPINGS" | jq -r '.[] | "\(.frontend_repo | split("/") | last):\(.domain):\(.stripe_price_id // "")"')
        
        # Deploy each project only if there are new commits
        while IFS=: read -r project domain price_id; do
          echo "Checking for new commits in project: $project (domain: $domain)"
          
          # Get the latest deployment to check if we need to deploy
          latest_deployment=$(curl -s "https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/pages/projects/$project/deployments?per_page=1" \
            -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
            -H "Content-Type: application/json")
          
          if ! echo "$latest_deployment" | jq -e '.success == true' > /dev/null; then
            echo "::error::Failed to get latest deployment for project $project"
            echo "$latest_deployment" | jq -r '.errors[0].message'
            exit 1
          fi
          
          # Get the commit hash of the latest deployment
          latest_commit=$(echo "$latest_deployment" | jq -r '.result[0].deployment_trigger.metadata.commit_hash // empty')
          
          # Get the current commit hash from the main branch
          current_commit=$(curl -s "https://api.github.com/repos/${{ github.repository_owner }}/$project/commits/main" \
            -H "Authorization: token ${{ github.token }}" \
            -H "Accept: application/vnd.github.v3+json" | jq -r '.sha')
          
          if [ "$latest_commit" = "$current_commit" ]; then
            echo "No new commits for project $project, skipping deployment"
            continue
          fi
          
          echo "New commits detected for project $project, triggering deployment"
          
          # Clone the project repository
          TEMP_DIR=$(mktemp -d)
          cd "$TEMP_DIR"
          
          echo "Cloning $project repository..."
          git clone "https://x-access-token:${{ github.token }}@github.com/${{ github.repository_owner }}/$project.git" .
          
          # Install dependencies and build the project
          echo "Installing dependencies and building $project..."
          npm install
          npm run build
          
          # Set up environment variables for deployment
          if [ -n "$price_id" ] && [ "$price_id" != "null" ]; then
            echo "Using price ID for $domain: $price_id"
            echo "Setting environment variable: STRIPE_PRICE_ID"
            
            # Deploy with environment variable using wrangler
            wrangler pages deploy dist --project-name="$project" \
              --env STRIPE_PRICE_ID="$price_id" \
              --account-id="${{ inputs.cloudflare_account_id }}" \
              --api-token="${{ inputs.cloudflare_api_token }}"
          else
            echo "No price ID found for $domain, deploying without Stripe configuration"
            
            # Deploy without environment variable
            wrangler pages deploy dist --project-name="$project" \
              --account-id="${{ inputs.cloudflare_account_id }}" \
              --api-token="${{ inputs.cloudflare_api_token }}"
          fi
          
          echo "Successfully deployed project $project"
          
          # Clean up
          cd /
          rm -rf "$TEMP_DIR"
        done <<< "$PROJECT_DOMAIN_MAP"

    - name: Configure Custom Domains
      shell: bash
      run: |
        # Extract project names and domains from mappings
        MAPPINGS='${{ steps.get-mappings.outputs.mappings }}'
        if [ "$MAPPINGS" = "[]" ]; then
          echo "No domain mappings found, skipping domain configuration"
          exit 0
        fi
        
        PROJECTS=$(echo "$MAPPINGS" | jq -r '.[].frontend_repo | split("/") | last')
        DOMAINS=$(echo "$MAPPINGS" | jq -r '.[].domain')
        
        # Convert to arrays
        readarray -t project_array <<< "$PROJECTS"
        readarray -t domain_array <<< "$DOMAINS"
        
        # Configure custom domain for each project
        for i in "${!project_array[@]}"; do
          project="${project_array[$i]}"
          domain="${domain_array[$i]}"
          echo "Contacting ... https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/pages/projects/$project/domains"
          response=$(curl -s https://api.cloudflare.com/client/v4/accounts/${{ inputs.cloudflare_account_id }}/pages/projects/$project/domains \
            -H 'Content-Type: application/json' \
            -H "Authorization: Bearer ${{ inputs.cloudflare_api_token }}" \
            -d "{\"name\": \"$domain\"}")
          
          # Check if the request was successful or if domain is already configured
          if ! echo "$response" | jq -e '.success == true' > /dev/null; then
            error_message=$(echo "$response" | jq -r '.errors[0].message')
            if [[ "$error_message" == *"already added this custom domain"* ]]; then
              echo "Domain $domain is already configured for project $project"
            else
              echo "::error::Failed to configure domain $domain for project $project"
              echo "$error_message"
              exit 1
            fi
          fi
        done